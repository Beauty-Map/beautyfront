{
  "resolvedId": "/home/saeed/w/projects/beautymap/beautyfront/node_modules/@vue-leaflet/vue-leaflet/dist/vue-leaflet.es.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { watch as He, ref as c, provide as A, inject as O, onUnmounted as pe, h as U, onBeforeUnmount as R, defineComponent as S, onMounted as _, markRaw as j, nextTick as g, render as mt, reactive as vt, computed as oe } from \"vue\";\nconst ce = (e, o) => {\n  for (const t of Object.keys(o))\n    e.on(t, o[t]);\n}, ye = (e) => {\n  for (const o of Object.keys(e)) {\n    const t = e[o];\n    t && k(t.cancel) && t.cancel();\n  }\n}, Je = (e) => !e || typeof e.charAt != \"function\" ? e : e.charAt(0).toUpperCase() + e.slice(1), k = (e) => typeof e == \"function\", L = (e, o, t) => {\n  for (const n in t) {\n    const s = \"set\" + Je(n);\n    e[s] ? He(\n      () => t[n],\n      (r, l) => {\n        e[s](r, l);\n      }\n    ) : o[s] && He(\n      () => t[n],\n      (r) => {\n        o[s](r);\n      }\n    );\n  }\n}, f = (e, o, t = {}) => {\n  const n = { ...t };\n  for (const s in e) {\n    const r = o[s], l = e[s];\n    r && (r && r.custom === !0 || l !== void 0 && (n[s] = l));\n  }\n  return n;\n}, T = (e) => {\n  const o = {}, t = {};\n  for (const n in e)\n    if (n.startsWith(\"on\") && !n.startsWith(\"onUpdate\") && n !== \"onReady\") {\n      const s = n.slice(2).toLocaleLowerCase();\n      o[s] = e[n];\n    } else\n      t[n] = e[n];\n  return { listeners: o, attrs: t };\n}, qe = async (e) => {\n  const o = await Promise.all([\n    import(\"leaflet/dist/images/marker-icon-2x.png\"),\n    import(\"leaflet/dist/images/marker-icon.png\"),\n    import(\"leaflet/dist/images/marker-shadow.png\")\n  ]);\n  delete e.Default.prototype._getIconUrl, e.Default.mergeOptions({\n    iconRetinaUrl: o[0].default,\n    iconUrl: o[1].default,\n    shadowUrl: o[2].default\n  });\n}, Y = (e) => {\n  const o = c(\n    (...n) => console.warn(`Method ${e} has been invoked without being replaced`)\n  ), t = (...n) => o.value(...n);\n  return t.wrapped = o, A(e, t), t;\n}, V = (e, o) => e.wrapped.value = o, b = typeof self == \"object\" && self.self === self && self || typeof global == \"object\" && global.global === global && global || globalThis, m = (e) => {\n  const o = O(e);\n  if (o === void 0)\n    throw new Error(\n      `Attempt to inject ${e.description} before it was provided.`\n    );\n  return o;\n}, Kt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  WINDOW_OR_GLOBAL: b,\n  assertInject: m,\n  bindEventHandlers: ce,\n  cancelDebounces: ye,\n  capitalizeFirstLetter: Je,\n  isFunction: k,\n  propsBinder: L,\n  propsToLeafletOptions: f,\n  provideLeafletWrapper: Y,\n  remapEvents: T,\n  resetWebpackIcon: qe,\n  updateLeafletWrapper: V\n}, Symbol.toStringTag, { value: \"Module\" })), h = Symbol(\n  \"useGlobalLeaflet\"\n), M = Symbol(\"addLayer\"), ee = Symbol(\"removeLayer\"), H = Symbol(\n  \"registerControl\"\n), me = Symbol(\n  \"registerLayerControl\"\n), ve = Symbol(\n  \"canSetParentHtml\"\n), be = Symbol(\"setParentHtml\"), fe = Symbol(\"setIcon\"), ge = Symbol(\"bindPopup\"), Le = Symbol(\"bindTooltip\"), he = Symbol(\"unbindPopup\"), Oe = Symbol(\"unbindTooltip\"), Qt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  AddLayerInjection: M,\n  BindPopupInjection: ge,\n  BindTooltipInjection: Le,\n  CanSetParentHtmlInjection: ve,\n  RegisterControlInjection: H,\n  RegisterLayerControlInjection: me,\n  RemoveLayerInjection: ee,\n  SetIconInjection: fe,\n  SetParentHtmlInjection: be,\n  UnbindPopupInjection: he,\n  UnbindTooltipInjection: Oe,\n  UseGlobalLeafletInjection: h\n}, Symbol.toStringTag, { value: \"Module\" })), W = {\n  options: {\n    type: Object,\n    default: () => ({}),\n    custom: !0\n  }\n}, J = (e) => ({ options: e.options, methods: {} }), bt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  componentProps: W,\n  setupComponent: J\n}, Symbol.toStringTag, { value: \"Module\" })), D = {\n  ...W,\n  pane: {\n    type: String\n  },\n  attribution: {\n    type: String\n  },\n  name: {\n    type: String,\n    custom: !0\n  },\n  layerType: {\n    type: String,\n    custom: !0\n  },\n  visible: {\n    type: Boolean,\n    custom: !0,\n    default: !0\n  }\n}, q = (e, o, t) => {\n  const n = m(M), s = m(ee), { options: r, methods: l } = J(e), a = f(\n    e,\n    D,\n    r\n  ), i = () => n({ leafletObject: o.value }), u = () => s({ leafletObject: o.value }), d = {\n    ...l,\n    setAttribution(y) {\n      u(), o.value.options.attribution = y, e.visible && i();\n    },\n    setName() {\n      u(), e.visible && i();\n    },\n    setLayerType() {\n      u(), e.visible && i();\n    },\n    setVisible(y) {\n      o.value && (y ? i() : u());\n    },\n    bindPopup(y) {\n      if (!o.value || !k(o.value.bindPopup)) {\n        console.warn(\n          \"Attempt to bind popup before bindPopup method available on layer.\"\n        );\n        return;\n      }\n      o.value.bindPopup(y);\n    },\n    bindTooltip(y) {\n      if (!o.value || !k(o.value.bindTooltip)) {\n        console.warn(\n          \"Attempt to bind tooltip before bindTooltip method available on layer.\"\n        );\n        return;\n      }\n      o.value.bindTooltip(y);\n    },\n    unbindTooltip() {\n      o.value && (k(o.value.closeTooltip) && o.value.closeTooltip(), k(o.value.unbindTooltip) && o.value.unbindTooltip());\n    },\n    unbindPopup() {\n      o.value && (k(o.value.closePopup) && o.value.closePopup(), k(o.value.unbindPopup) && o.value.unbindPopup());\n    },\n    updateVisibleProp(y) {\n      t.emit(\"update:visible\", y);\n    }\n  };\n  return A(ge, d.bindPopup), A(Le, d.bindTooltip), A(he, d.unbindPopup), A(Oe, d.unbindTooltip), pe(() => {\n    d.unbindPopup(), d.unbindTooltip(), u();\n  }), { options: a, methods: d };\n}, G = (e, o) => {\n  if (e && o.default)\n    return U(\"div\", { style: { display: \"none\" } }, o.default());\n}, ft = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  layerProps: D,\n  render: G,\n  setupLayer: q\n}, Symbol.toStringTag, { value: \"Module\" })), Se = {\n  ...D,\n  interactive: {\n    type: Boolean,\n    default: void 0\n  },\n  bubblingMouseEvents: {\n    type: Boolean,\n    default: void 0\n  }\n}, Ke = (e, o, t) => {\n  const { options: n, methods: s } = q(\n    e,\n    o,\n    t\n  );\n  return { options: f(\n    e,\n    Se,\n    n\n  ), methods: s };\n}, gt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  interactiveLayerProps: Se,\n  setupInteractiveLayer: Ke\n}, Symbol.toStringTag, { value: \"Module\" })), ne = {\n  ...Se,\n  stroke: {\n    type: Boolean,\n    default: void 0\n  },\n  color: {\n    type: String\n  },\n  weight: {\n    type: Number\n  },\n  opacity: {\n    type: Number\n  },\n  lineCap: {\n    type: String\n  },\n  lineJoin: {\n    type: String\n  },\n  dashArray: {\n    type: String\n  },\n  dashOffset: {\n    type: String\n  },\n  fill: {\n    type: Boolean,\n    default: void 0\n  },\n  fillColor: {\n    type: String\n  },\n  fillOpacity: {\n    type: Number\n  },\n  fillRule: {\n    type: String\n  },\n  className: {\n    type: String\n  }\n}, _e = (e, o, t) => {\n  const { options: n, methods: s } = Ke(e, o, t), r = f(\n    e,\n    ne,\n    n\n  ), l = m(ee), a = {\n    ...s,\n    setStroke(i) {\n      o.value.setStyle({ stroke: i });\n    },\n    setColor(i) {\n      o.value.setStyle({ color: i });\n    },\n    setWeight(i) {\n      o.value.setStyle({ weight: i });\n    },\n    setOpacity(i) {\n      o.value.setStyle({ opacity: i });\n    },\n    setLineCap(i) {\n      o.value.setStyle({ lineCap: i });\n    },\n    setLineJoin(i) {\n      o.value.setStyle({ lineJoin: i });\n    },\n    setDashArray(i) {\n      o.value.setStyle({ dashArray: i });\n    },\n    setDashOffset(i) {\n      o.value.setStyle({ dashOffset: i });\n    },\n    setFill(i) {\n      o.value.setStyle({ fill: i });\n    },\n    setFillColor(i) {\n      o.value.setStyle({ fillColor: i });\n    },\n    setFillOpacity(i) {\n      o.value.setStyle({ fillOpacity: i });\n    },\n    setFillRule(i) {\n      o.value.setStyle({ fillRule: i });\n    },\n    setClassName(i) {\n      o.value.setStyle({ className: i });\n    }\n  };\n  return R(() => {\n    l({ leafletObject: o.value });\n  }), { options: r, methods: a };\n}, Lt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  pathProps: ne,\n  setupPath: _e\n}, Symbol.toStringTag, { value: \"Module\" })), re = {\n  ...ne,\n  /**\n   * Radius of the marker in pixels.\n   */\n  radius: {\n    type: Number\n  },\n  latLng: {\n    type: [Object, Array],\n    required: !0,\n    custom: !0\n  }\n}, je = (e, o, t) => {\n  const { options: n, methods: s } = _e(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    re,\n    n\n  ), l = {\n    ...s,\n    setRadius(a) {\n      o.value.setRadius(a);\n    },\n    setLatLng(a) {\n      o.value.setLatLng(a);\n    }\n  };\n  return { options: r, methods: l };\n}, ht = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  circleMarkerProps: re,\n  setupCircleMarker: je\n}, Symbol.toStringTag, { value: \"Module\" })), Pe = {\n  ...re,\n  /**\n   * Radius of the circle in meters.\n   */\n  radius: {\n    type: Number\n  }\n}, Qe = (e, o, t) => {\n  const { options: n, methods: s } = je(e, o, t), r = f(\n    e,\n    Pe,\n    n\n  ), l = {\n    ...s\n  };\n  return { options: r, methods: l };\n}, Ot = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  circleProps: Pe,\n  setupCircle: Qe\n}, Symbol.toStringTag, { value: \"Module\" })), Xt = S({\n  name: \"LCircle\",\n  props: Pe,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { options: l, methods: a } = Qe(e, t, o);\n    return _(async () => {\n      const { circle: i } = s ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      t.value = j(i(e.latLng, l));\n      const { listeners: u } = T(o.attrs);\n      t.value.on(u), L(a, t.value, e), r({\n        ...e,\n        ...a,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), Yt = S({\n  name: \"LCircleMarker\",\n  props: re,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { options: l, methods: a } = je(\n      e,\n      t,\n      o\n    );\n    return _(async () => {\n      const { circleMarker: i } = s ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      t.value = j(\n        i(e.latLng, l)\n      );\n      const { listeners: u } = T(o.attrs);\n      t.value.on(u), L(a, t.value, e), r({\n        ...e,\n        ...a,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), F = {\n  ...W,\n  position: {\n    type: String\n  }\n}, K = (e, o) => {\n  const { options: t, methods: n } = J(e), s = f(\n    e,\n    F,\n    t\n  ), r = {\n    ...n,\n    setPosition(l) {\n      o.value && o.value.setPosition(l);\n    }\n  };\n  return pe(() => {\n    o.value && o.value.remove();\n  }), { options: s, methods: r };\n}, Xe = (e) => e.default ? U(\"div\", { ref: \"root\" }, e.default()) : null, St = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  controlProps: F,\n  renderLControl: Xe,\n  setupControl: K\n}, Symbol.toStringTag, { value: \"Module\" })), Vt = S({\n  name: \"LControl\",\n  props: {\n    ...F,\n    disableClickPropagation: {\n      type: Boolean,\n      custom: !0,\n      default: !0\n    },\n    disableScrollPropagation: {\n      type: Boolean,\n      custom: !0,\n      default: !1\n    }\n  },\n  setup(e, o) {\n    const t = c(), n = c(), s = O(h), r = m(H), { options: l, methods: a } = K(e, t);\n    return _(async () => {\n      const { Control: i, DomEvent: u } = s ? b.L : await import(\"leaflet/dist/leaflet-src.esm\"), d = i.extend({\n        onAdd() {\n          return n.value;\n        }\n      });\n      t.value = j(new d(l)), L(a, t.value, e), r({ leafletObject: t.value }), e.disableClickPropagation && n.value && u.disableClickPropagation(n.value), e.disableScrollPropagation && n.value && u.disableScrollPropagation(n.value), g(() => o.emit(\"ready\", t.value));\n    }), { root: n, leafletObject: t };\n  },\n  render() {\n    return Xe(this.$slots);\n  }\n}), Ce = {\n  ...F,\n  prefix: {\n    type: String\n  }\n}, Ye = (e, o) => {\n  const { options: t, methods: n } = K(\n    e,\n    o\n  ), s = f(\n    e,\n    Ce,\n    t\n  ), r = {\n    ...n,\n    setPrefix(l) {\n      o.value.setPrefix(l);\n    }\n  };\n  return { options: s, methods: r };\n}, _t = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  controlAttributionProps: Ce,\n  setupControlAttribution: Ye\n}, Symbol.toStringTag, { value: \"Module\" })), xt = S({\n  name: \"LControlAttribution\",\n  props: Ce,\n  setup(e, o) {\n    const t = c(), n = O(h), s = m(H), { options: r, methods: l } = Ye(e, t);\n    return _(async () => {\n      const { control: a } = n ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      t.value = j(\n        a.attribution(r)\n      ), L(l, t.value, e), s({ leafletObject: t.value }), g(() => o.emit(\"ready\", t.value));\n    }), { leafletObject: t };\n  },\n  render() {\n    return null;\n  }\n}), Te = {\n  ...F,\n  collapsed: {\n    type: Boolean,\n    default: void 0\n  },\n  autoZIndex: {\n    type: Boolean,\n    default: void 0\n  },\n  hideSingleBase: {\n    type: Boolean,\n    default: void 0\n  },\n  sortLayers: {\n    type: Boolean,\n    default: void 0\n  },\n  sortFunction: {\n    type: Function\n  }\n}, Ve = (e, o) => {\n  const { options: t } = K(e, o);\n  return { options: f(\n    e,\n    Te,\n    t\n  ), methods: {\n    addLayer(r) {\n      r.layerType === \"base\" ? o.value.addBaseLayer(r.leafletObject, r.name) : r.layerType === \"overlay\" && o.value.addOverlay(r.leafletObject, r.name);\n    },\n    removeLayer(r) {\n      o.value.removeLayer(r.leafletObject);\n    }\n  } };\n}, jt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  controlLayersProps: Te,\n  setupControlLayers: Ve\n}, Symbol.toStringTag, { value: \"Module\" })), Rt = S({\n  name: \"LControlLayers\",\n  props: Te,\n  setup(e, o) {\n    const t = c(), n = O(h), s = m(me), { options: r, methods: l } = Ve(e, t);\n    return _(async () => {\n      const { control: a } = n ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      t.value = j(\n        a.layers(void 0, void 0, r)\n      ), L(l, t.value, e), s({\n        ...e,\n        ...l,\n        leafletObject: t.value\n      }), g(() => o.emit(\"ready\", t.value));\n    }), { leafletObject: t };\n  },\n  render() {\n    return null;\n  }\n}), Me = {\n  ...F,\n  maxWidth: {\n    type: Number\n  },\n  metric: {\n    type: Boolean,\n    default: void 0\n  },\n  imperial: {\n    type: Boolean,\n    default: void 0\n  },\n  updateWhenIdle: {\n    type: Boolean,\n    default: void 0\n  }\n}, xe = (e, o) => {\n  const { options: t, methods: n } = K(\n    e,\n    o\n  );\n  return { options: f(\n    e,\n    Me,\n    t\n  ), methods: n };\n}, Pt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  controlScaleProps: Me,\n  setupControlScale: xe\n}, Symbol.toStringTag, { value: \"Module\" })), eo = S({\n  name: \"LControlScale\",\n  props: Me,\n  setup(e, o) {\n    const t = c(), n = O(h), s = m(H), { options: r, methods: l } = xe(e, t);\n    return _(async () => {\n      const { control: a } = n ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      t.value = j(a.scale(r)), L(l, t.value, e), s({ leafletObject: t.value }), g(() => o.emit(\"ready\", t.value));\n    }), { leafletObject: t };\n  },\n  render() {\n    return null;\n  }\n}), Be = {\n  ...F,\n  zoomInText: {\n    type: String\n  },\n  zoomInTitle: {\n    type: String\n  },\n  zoomOutText: {\n    type: String\n  },\n  zoomOutTitle: {\n    type: String\n  }\n}, Re = (e, o) => {\n  const { options: t, methods: n } = K(\n    e,\n    o\n  );\n  return { options: f(\n    e,\n    Be,\n    t\n  ), methods: n };\n}, Ct = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  controlZoomProps: Be,\n  setupControlZoom: Re\n}, Symbol.toStringTag, { value: \"Module\" })), to = S({\n  name: \"LControlZoom\",\n  props: Be,\n  setup(e, o) {\n    const t = c(), n = O(h), s = m(H), { options: r, methods: l } = Re(e, t);\n    return _(async () => {\n      const { control: a } = n ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      t.value = j(a.zoom(r)), L(l, t.value, e), s({ leafletObject: t.value }), g(() => o.emit(\"ready\", t.value));\n    }), { leafletObject: t };\n  },\n  render() {\n    return null;\n  }\n}), te = {\n  ...D\n}, se = (e, o, t) => {\n  const { options: n, methods: s } = q(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    te,\n    n\n  ), l = {\n    ...s,\n    addLayer(a) {\n      o.value.addLayer(a.leafletObject);\n    },\n    removeLayer(a) {\n      o.value.removeLayer(a.leafletObject);\n    }\n  };\n  return A(M, l.addLayer), A(ee, l.removeLayer), { options: r, methods: l };\n}, Tt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  layerGroupProps: te,\n  setupLayerGroup: se\n}, Symbol.toStringTag, { value: \"Module\" })), we = {\n  ...te\n}, et = (e, o, t) => {\n  const { options: n, methods: s } = se(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    we,\n    n\n  ), l = {\n    ...s\n  };\n  return { options: r, methods: l };\n}, Mt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  featureGroupProps: we,\n  setupFeatureGroup: et\n}, Symbol.toStringTag, { value: \"Module\" })), oo = S({\n  props: we,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { methods: l, options: a } = et(\n      e,\n      t,\n      o\n    );\n    return _(async () => {\n      const { featureGroup: i } = s ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      t.value = j(\n        i(void 0, a)\n      );\n      const { listeners: u } = T(o.attrs);\n      t.value.on(u), L(l, t.value, e), r({\n        ...e,\n        ...l,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), Ie = {\n  ...te,\n  geojson: {\n    type: [Object, Array],\n    custom: !0\n  },\n  optionsStyle: {\n    type: Function,\n    custom: !0\n  }\n}, tt = (e, o, t) => {\n  const { options: n, methods: s } = se(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    Ie,\n    n\n  );\n  Object.prototype.hasOwnProperty.call(e, \"optionsStyle\") && (r.style = e.optionsStyle);\n  const l = {\n    ...s,\n    setGeojson(a) {\n      o.value.clearLayers(), o.value.addData(a);\n    },\n    setOptionsStyle(a) {\n      o.value.setStyle(a);\n    },\n    getGeoJSONData() {\n      return o.value.toGeoJSON();\n    },\n    getBounds() {\n      return o.value.getBounds();\n    }\n  };\n  return { options: r, methods: l };\n}, Bt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  geoJSONProps: Ie,\n  setupGeoJSON: tt\n}, Symbol.toStringTag, { value: \"Module\" })), no = S({\n  props: Ie,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { methods: l, options: a } = tt(e, t, o);\n    return _(async () => {\n      const { geoJSON: i } = s ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      t.value = j(i(e.geojson, a));\n      const { listeners: u } = T(o.attrs);\n      t.value.on(u), L(l, t.value, e), r({\n        ...e,\n        ...l,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), ae = {\n  ...D,\n  opacity: {\n    type: Number\n  },\n  zIndex: {\n    type: Number\n  },\n  tileSize: {\n    type: [Number, Array, Object]\n  },\n  noWrap: {\n    type: Boolean,\n    default: void 0\n  },\n  minZoom: {\n    type: Number\n  },\n  maxZoom: {\n    type: Number\n  },\n  className: {\n    type: String\n  }\n}, Ae = (e, o, t) => {\n  const { options: n, methods: s } = q(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    ae,\n    n\n  ), l = {\n    ...s,\n    setTileComponent() {\n      var a;\n      (a = o.value) == null || a.redraw();\n    }\n  };\n  return pe(() => {\n    o.value.off();\n  }), { options: r, methods: l };\n}, ot = (e, o, t, n) => e.extend({\n  initialize(s) {\n    this.tileComponents = {}, this.on(\"tileunload\", this._unloadTile), t.setOptions(this, s);\n  },\n  createTile(s) {\n    const r = this._tileCoordsToKey(s);\n    this.tileComponents[r] = o.create(\"div\");\n    const l = U({ setup: n, props: [\"coords\"] }, { coords: s });\n    return mt(l, this.tileComponents[r]), this.tileComponents[r];\n  },\n  _unloadTile(s) {\n    const r = this._tileCoordsToKey(s.coords);\n    this.tileComponents[r] && (this.tileComponents[r].innerHTML = \"\", this.tileComponents[r] = void 0);\n  }\n}), wt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  CreateVueGridLayer: ot,\n  gridLayerProps: ae,\n  setupGridLayer: Ae\n}, Symbol.toStringTag, { value: \"Module\" })), ro = S({\n  props: {\n    ...ae,\n    childRender: {\n      type: Function,\n      required: !0\n    }\n  },\n  setup(e, o) {\n    const t = c(), n = c(null), s = c(!1), r = O(h), l = m(M), { options: a, methods: i } = Ae(e, t, o);\n    return _(async () => {\n      const { GridLayer: u, DomUtil: d, Util: y } = r ? b.L : await import(\"leaflet/dist/leaflet-src.esm\"), w = ot(\n        u,\n        d,\n        y,\n        e.childRender\n      );\n      t.value = j(new w(a));\n      const { listeners: v } = T(o.attrs);\n      t.value.on(v), L(i, t.value, e), l({\n        ...e,\n        ...i,\n        leafletObject: t.value\n      }), s.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { root: n, ready: s, leafletObject: t };\n  },\n  render() {\n    return this.ready ? U(\"div\", { style: { display: \"none\" }, ref: \"root\" }) : null;\n  }\n}), de = {\n  iconUrl: {\n    type: String\n  },\n  iconRetinaUrl: {\n    type: String\n  },\n  iconSize: {\n    type: [Object, Array]\n  },\n  iconAnchor: {\n    type: [Object, Array]\n  },\n  popupAnchor: {\n    type: [Object, Array]\n  },\n  tooltipAnchor: {\n    type: [Object, Array]\n  },\n  shadowUrl: {\n    type: String\n  },\n  shadowRetinaUrl: {\n    type: String\n  },\n  shadowSize: {\n    type: [Object, Array]\n  },\n  shadowAnchor: {\n    type: [Object, Array]\n  },\n  bgPos: {\n    type: [Object, Array]\n  },\n  className: {\n    type: String\n  }\n}, It = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  iconProps: de\n}, Symbol.toStringTag, { value: \"Module\" })), so = S({\n  name: \"LIcon\",\n  props: {\n    ...de,\n    ...W\n  },\n  setup(e, o) {\n    const t = c(), n = O(h), s = m(ve), r = m(be), l = m(fe);\n    let a, i, u, d, y;\n    const w = (N, P, B) => {\n      const I = N && N.innerHTML;\n      if (!P) {\n        B && y && s() && r(I);\n        return;\n      }\n      const { listeners: E } = T(o.attrs);\n      y && i(y, E);\n      const { options: ue } = J(e), $ = f(\n        e,\n        de,\n        ue\n      );\n      I && ($.html = I), y = $.html ? u($) : d($), a(y, E), l(y);\n    }, v = () => {\n      g(() => w(t.value, !0, !1));\n    }, z = () => {\n      g(() => w(t.value, !1, !0));\n    }, Z = {\n      setIconUrl: v,\n      setIconRetinaUrl: v,\n      setIconSize: v,\n      setIconAnchor: v,\n      setPopupAnchor: v,\n      setTooltipAnchor: v,\n      setShadowUrl: v,\n      setShadowRetinaUrl: v,\n      setShadowAnchor: v,\n      setBgPos: v,\n      setClassName: v,\n      setHtml: v\n    };\n    return _(async () => {\n      const {\n        DomEvent: N,\n        divIcon: P,\n        icon: B\n      } = n ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      a = N.on, i = N.off, u = P, d = B, L(Z, {}, e), new MutationObserver(z).observe(t.value, {\n        attributes: !0,\n        childList: !0,\n        characterData: !0,\n        subtree: !0\n      }), v();\n    }), { root: t };\n  },\n  render() {\n    const e = this.$slots.default ? this.$slots.default() : void 0;\n    return U(\"div\", { ref: \"root\" }, e);\n  }\n}), Ge = {\n  ...D,\n  opacity: {\n    type: Number\n  },\n  alt: {\n    type: String\n  },\n  interactive: {\n    type: Boolean,\n    default: void 0\n  },\n  crossOrigin: {\n    type: Boolean,\n    default: void 0\n  },\n  errorOverlayUrl: {\n    type: String\n  },\n  zIndex: {\n    type: Number\n  },\n  className: {\n    type: String\n  },\n  url: {\n    type: String,\n    required: !0,\n    custom: !0\n  },\n  bounds: {\n    type: [Array, Object],\n    required: !0,\n    custom: !0\n  }\n}, nt = (e, o, t) => {\n  const { options: n, methods: s } = q(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    Ge,\n    n\n  ), l = {\n    ...s,\n    /**\n     * Sets the opacity of the overlay.\n     * @param {number} opacity\n     */\n    setOpacity(a) {\n      return o.value.setOpacity(a);\n    },\n    /**\n     * Changes the URL of the image.\n     * @param {string} url\n     */\n    setUrl(a) {\n      return o.value.setUrl(a);\n    },\n    /**\n     * Update the bounds that this ImageOverlay covers\n     * @param {LatLngBounds | Array<Array<number>>} bounds\n     */\n    setBounds(a) {\n      return o.value.setBounds(a);\n    },\n    /**\n     * Get the bounds that this ImageOverlay covers\n     * @returns {LatLngBounds}\n     */\n    getBounds() {\n      return o.value.getBounds();\n    },\n    /**\n     * Returns the instance of HTMLImageElement used by this overlay.\n     * @returns {HTMLElement}\n     */\n    getElement() {\n      return o.value.getElement();\n    },\n    /**\n     * Brings the layer to the top of all overlays.\n     */\n    bringToFront() {\n      return o.value.bringToFront();\n    },\n    /**\n     * Brings the layer to the bottom of all overlays.\n     */\n    bringToBack() {\n      return o.value.bringToBack();\n    },\n    /**\n     * Changes the zIndex of the image overlay.\n     * @param {number} zIndex\n     */\n    setZIndex(a) {\n      return o.value.setZIndex(a);\n    }\n  };\n  return { options: r, methods: l };\n}, At = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  imageOverlayProps: Ge,\n  setupImageOverlay: nt\n}, Symbol.toStringTag, { value: \"Module\" })), ao = S({\n  name: \"LImageOverlay\",\n  props: Ge,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { options: l, methods: a } = nt(\n      e,\n      t,\n      o\n    );\n    return _(async () => {\n      const { imageOverlay: i } = s ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      t.value = j(\n        i(e.url, e.bounds, l)\n      );\n      const { listeners: u } = T(o.attrs);\n      t.value.on(u), L(a, t.value, e), r({\n        ...e,\n        ...a,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), lo = S({\n  props: te,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { methods: l } = se(e, t, o);\n    return _(async () => {\n      const { layerGroup: a } = s ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      t.value = j(\n        a(void 0, e.options)\n      );\n      const { listeners: i } = T(o.attrs);\n      t.value.on(i), L(l, t.value, e), r({\n        ...e,\n        ...l,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n});\nfunction rt(e, o, t) {\n  var n, s, r;\n  o === void 0 && (o = 50), t === void 0 && (t = {});\n  var l = (n = t.isImmediate) != null && n, a = (s = t.callback) != null && s, i = t.maxWait, u = Date.now(), d = [];\n  function y() {\n    if (i !== void 0) {\n      var v = Date.now() - u;\n      if (v + o >= i)\n        return i - v;\n    }\n    return o;\n  }\n  var w = function() {\n    var v = [].slice.call(arguments), z = this;\n    return new Promise(function(Z, N) {\n      var P = l && r === void 0;\n      if (r !== void 0 && clearTimeout(r), r = setTimeout(function() {\n        if (r = void 0, u = Date.now(), !l) {\n          var I = e.apply(z, v);\n          a && a(I), d.forEach(function(E) {\n            return (0, E.resolve)(I);\n          }), d = [];\n        }\n      }, y()), P) {\n        var B = e.apply(z, v);\n        return a && a(B), Z(B);\n      }\n      d.push({ resolve: Z, reject: N });\n    });\n  };\n  return w.cancel = function(v) {\n    r !== void 0 && clearTimeout(r), d.forEach(function(z) {\n      return (0, z.reject)(v);\n    }), d = [];\n  }, w;\n}\nconst We = {\n  ...W,\n  /**\n   * The center of the map, supports .sync modifier\n   */\n  center: {\n    type: [Object, Array]\n  },\n  /**\n   * The bounds of the map, supports .sync modifier\n   */\n  bounds: {\n    type: [Array, Object]\n  },\n  /**\n   * The max bounds of the map\n   */\n  maxBounds: {\n    type: [Array, Object]\n  },\n  /**\n   * The zoom of the map, supports .sync modifier\n   */\n  zoom: {\n    type: Number\n  },\n  /**\n   * The minZoom of the map\n   */\n  minZoom: {\n    type: Number\n  },\n  /**\n   * The maxZoom of the map\n   */\n  maxZoom: {\n    type: Number\n  },\n  /**\n   * The paddingBottomRight of the map\n   */\n  paddingBottomRight: {\n    type: [Object, Array]\n  },\n  /**\n   * The paddingTopLeft of the map\n   */\n  paddingTopLeft: {\n    type: Object\n  },\n  /**\n   * The padding of the map\n   */\n  padding: {\n    type: Object\n  },\n  /**\n   * The worldCopyJump option for the map\n   */\n  worldCopyJump: {\n    type: Boolean,\n    default: void 0\n  },\n  /**\n   * The CRS to use for the map. Can be an object that defines a coordinate reference\n   * system for projecting geographical points into screen coordinates and back\n   * (see https://leafletjs.com/reference-1.7.1.html#crs-l-crs-base), or a string\n   * name identifying one of Leaflet's defined CRSs, such as \"EPSG4326\".\n   */\n  crs: {\n    type: [String, Object]\n  },\n  maxBoundsViscosity: {\n    type: Number\n  },\n  inertia: {\n    type: Boolean,\n    default: void 0\n  },\n  inertiaDeceleration: {\n    type: Number\n  },\n  inertiaMaxSpeed: {\n    type: Number\n  },\n  easeLinearity: {\n    type: Number\n  },\n  zoomAnimation: {\n    type: Boolean,\n    default: void 0\n  },\n  zoomAnimationThreshold: {\n    type: Number\n  },\n  fadeAnimation: {\n    type: Boolean,\n    default: void 0\n  },\n  markerZoomAnimation: {\n    type: Boolean,\n    default: void 0\n  },\n  noBlockingAnimations: {\n    type: Boolean,\n    default: void 0\n  },\n  useGlobalLeaflet: {\n    type: Boolean,\n    default: !0,\n    custom: !0\n  }\n}, io = S({\n  inheritAttrs: !1,\n  emits: [\"ready\", \"update:zoom\", \"update:center\", \"update:bounds\"],\n  props: We,\n  setup(e, o) {\n    const t = c(), n = vt({\n      ready: !1,\n      layersToAdd: [],\n      layersInControl: []\n    }), { options: s } = J(e), r = f(\n      e,\n      We,\n      s\n    ), { listeners: l, attrs: a } = T(o.attrs), i = Y(M), u = Y(ee), d = Y(H), y = Y(\n      me\n    );\n    A(h, e.useGlobalLeaflet);\n    const w = oe(() => {\n      const P = {};\n      return e.noBlockingAnimations && (P.animate = !1), P;\n    }), v = oe(() => {\n      const P = w.value;\n      return e.padding && (P.padding = e.padding), e.paddingTopLeft && (P.paddingTopLeft = e.paddingTopLeft), e.paddingBottomRight && (P.paddingBottomRight = e.paddingBottomRight), P;\n    }), z = {\n      moveend: rt((P) => {\n        n.leafletRef && (o.emit(\"update:zoom\", n.leafletRef.getZoom()), o.emit(\"update:center\", n.leafletRef.getCenter()), o.emit(\"update:bounds\", n.leafletRef.getBounds()));\n      }),\n      overlayadd(P) {\n        const B = n.layersInControl.find((I) => I.name === P.name);\n        B && B.updateVisibleProp(!0);\n      },\n      overlayremove(P) {\n        const B = n.layersInControl.find((I) => I.name === P.name);\n        B && B.updateVisibleProp(!1);\n      }\n    };\n    _(async () => {\n      e.useGlobalLeaflet && (b.L = b.L || await import(\"leaflet\"));\n      const { map: P, CRS: B, Icon: I, latLngBounds: E, latLng: ue, stamp: $ } = e.useGlobalLeaflet ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      try {\n        r.beforeMapMount && await r.beforeMapMount();\n      } catch (p) {\n        console.error(\n          `The following error occurred running the provided beforeMapMount hook ${p.message}`\n        );\n      }\n      await qe(I);\n      const yt = typeof r.crs == \"string\" ? B[r.crs] : r.crs;\n      r.crs = yt || B.EPSG3857;\n      const Q = {\n        addLayer(p) {\n          p.layerType !== void 0 && (n.layerControl === void 0 ? n.layersToAdd.push(p) : n.layersInControl.find(\n            (X) => $(X.leafletObject) === $(p.leafletObject)\n          ) || (n.layerControl.addLayer(p), n.layersInControl.push(p))), p.visible !== !1 && n.leafletRef.addLayer(p.leafletObject);\n        },\n        removeLayer(p) {\n          p.layerType !== void 0 && (n.layerControl === void 0 ? n.layersToAdd = n.layersToAdd.filter(\n            (C) => C.name !== p.name\n          ) : (n.layerControl.removeLayer(p.leafletObject), n.layersInControl = n.layersInControl.filter(\n            (C) => $(C.leafletObject) !== $(p.leafletObject)\n          ))), n.leafletRef.removeLayer(p.leafletObject);\n        },\n        registerLayerControl(p) {\n          n.layerControl = p, n.layersToAdd.forEach((C) => {\n            n.layerControl.addLayer(C);\n          }), n.layersToAdd = [], d(p);\n        },\n        registerControl(p) {\n          n.leafletRef.addControl(p.leafletObject);\n        },\n        setZoom(p) {\n          const C = n.leafletRef.getZoom();\n          p !== C && n.leafletRef.setZoom(p, w.value);\n        },\n        setCrs(p) {\n          const C = n.leafletRef.getBounds();\n          n.leafletRef.options.crs = p, n.leafletRef.fitBounds(C, {\n            animate: !1,\n            padding: [0, 0]\n          });\n        },\n        fitBounds(p) {\n          n.leafletRef.fitBounds(p, v.value);\n        },\n        setBounds(p) {\n          if (!p)\n            return;\n          const C = E(p);\n          if (!C.isValid())\n            return;\n          !(n.lastSetBounds || n.leafletRef.getBounds()).equals(C, 0) && (n.lastSetBounds = C, n.leafletRef.fitBounds(C));\n        },\n        setCenter(p) {\n          if (p == null)\n            return;\n          const C = ue(p), X = n.lastSetCenter || n.leafletRef.getCenter();\n          (X.lat !== C.lat || X.lng !== C.lng) && (n.lastSetCenter = C, n.leafletRef.panTo(C, w.value));\n        }\n      };\n      V(i, Q.addLayer), V(u, Q.removeLayer), V(d, Q.registerControl), V(y, Q.registerLayerControl), n.leafletRef = j(P(t.value, r)), L(Q, n.leafletRef, e), ce(n.leafletRef, z), ce(n.leafletRef, l), n.ready = !0, g(() => o.emit(\"ready\", n.leafletRef));\n    }), R(() => {\n      ye(z), n.leafletRef && (n.leafletRef.off(), n.leafletRef.remove());\n    });\n    const Z = oe(() => n.leafletRef), N = oe(() => n.ready);\n    return { root: t, ready: N, leafletObject: Z, attrs: a };\n  },\n  render({ attrs: e }) {\n    return e.style || (e.style = {}), e.style.width || (e.style.width = \"100%\"), e.style.height || (e.style.height = \"100%\"), U(\n      \"div\",\n      {\n        ...e,\n        ref: \"root\"\n      },\n      this.ready && this.$slots.default ? this.$slots.default() : {}\n    );\n  }\n}), Gt = [\"Symbol(Comment)\", \"Symbol(Text)\"], zt = [\"LTooltip\", \"LPopup\"], ze = {\n  ...D,\n  draggable: {\n    type: Boolean,\n    default: void 0\n  },\n  icon: {\n    type: [Object]\n  },\n  zIndexOffset: {\n    type: Number\n  },\n  latLng: {\n    type: [Object, Array],\n    custom: !0,\n    required: !0\n  }\n}, st = (e, o, t) => {\n  const { options: n, methods: s } = q(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    ze,\n    n\n  ), l = {\n    ...s,\n    setDraggable(a) {\n      o.value.dragging && (a ? o.value.dragging.enable() : o.value.dragging.disable());\n    },\n    latLngSync(a) {\n      t.emit(\"update:latLng\", a.latlng), t.emit(\"update:lat-lng\", a.latlng);\n    },\n    setLatLng(a) {\n      if (a != null && o.value) {\n        const i = o.value.getLatLng();\n        (!i || !i.equals(a)) && o.value.setLatLng(a);\n      }\n    }\n  };\n  return { options: r, methods: l };\n}, at = (e, o) => {\n  const t = o.slots.default && o.slots.default();\n  return t && t.length && t.some(Nt);\n};\nfunction Nt(e) {\n  return !(Gt.includes(e.type.toString()) || zt.includes(e.type.name));\n}\nconst $t = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  markerProps: ze,\n  setupMarker: st,\n  shouldBlankIcon: at\n}, Symbol.toStringTag, { value: \"Module\" })), uo = S({\n  name: \"LMarker\",\n  props: ze,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M);\n    A(\n      ve,\n      () => {\n        var u;\n        return !!((u = t.value) != null && u.getElement());\n      }\n    ), A(be, (u) => {\n      var y, w;\n      const d = k((y = t.value) == null ? void 0 : y.getElement) && ((w = t.value) == null ? void 0 : w.getElement());\n      d && (d.innerHTML = u);\n    }), A(\n      fe,\n      (u) => {\n        var d;\n        return ((d = t.value) == null ? void 0 : d.setIcon) && t.value.setIcon(u);\n      }\n    );\n    const { options: l, methods: a } = st(e, t, o), i = {\n      moveHandler: rt(a.latLngSync)\n    };\n    return _(async () => {\n      const { marker: u, divIcon: d } = s ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      at(l, o) && (l.icon = d({ className: \"\" })), t.value = j(u(e.latLng, l));\n      const { listeners: y } = T(o.attrs);\n      t.value.on(y), t.value.on(\"move\", i.moveHandler), L(a, t.value, e), r({\n        ...e,\n        ...a,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), R(() => ye(i)), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), le = {\n  ...ne,\n  smoothFactor: {\n    type: Number\n  },\n  noClip: {\n    type: Boolean,\n    default: void 0\n  },\n  latLngs: {\n    type: Array,\n    required: !0,\n    custom: !0\n  }\n}, Ne = (e, o, t) => {\n  const { options: n, methods: s } = _e(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    le,\n    n\n  ), l = {\n    ...s,\n    setSmoothFactor(a) {\n      o.value.setStyle({ smoothFactor: a });\n    },\n    setNoClip(a) {\n      o.value.setStyle({ noClip: a });\n    },\n    addLatLng(a) {\n      o.value.addLatLng(a);\n    }\n  };\n  return { options: r, methods: l };\n}, kt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  polylineProps: le,\n  setupPolyline: Ne\n}, Symbol.toStringTag, { value: \"Module\" })), x = {\n  ...le\n}, $e = (e, o, t) => {\n  const { options: n, methods: s } = Ne(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    x,\n    n\n  ), l = {\n    ...s,\n    toGeoJSON(a) {\n      return o.value.toGeoJSON(a);\n    }\n  };\n  return { options: r, methods: l };\n}, Ut = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  polygonProps: x,\n  setupPolygon: $e\n}, Symbol.toStringTag, { value: \"Module\" })), co = S({\n  name: \"LPolygon\",\n  props: x,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { options: l, methods: a } = $e(e, t, o);\n    return _(async () => {\n      const { polygon: i } = s ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      t.value = j(i(e.latLngs, l));\n      const { listeners: u } = T(o.attrs);\n      t.value.on(u), L(a, t.value, e), r({\n        ...e,\n        ...a,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), po = S({\n  name: \"LPolyline\",\n  props: le,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { options: l, methods: a } = Ne(e, t, o);\n    return _(async () => {\n      const { polyline: i } = s ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      t.value = j(\n        i(e.latLngs, l)\n      );\n      const { listeners: u } = T(o.attrs);\n      t.value.on(u), L(a, t.value, e), r({\n        ...e,\n        ...a,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), ke = {\n  ...W,\n  content: {\n    type: String,\n    default: null\n  }\n}, Ue = (e, o) => {\n  const { options: t, methods: n } = J(e), s = {\n    ...n,\n    setContent(r) {\n      o.value && r !== null && r !== void 0 && o.value.setContent(r);\n    }\n  };\n  return { options: t, methods: s };\n}, De = (e) => e.default ? U(\"div\", { ref: \"root\" }, e.default()) : null, Dt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  popperProps: ke,\n  render: De,\n  setupPopper: Ue\n}, Symbol.toStringTag, { value: \"Module\" })), lt = {\n  ...ke,\n  latLng: {\n    type: [Object, Array],\n    default: () => []\n  }\n}, it = (e, o) => {\n  const { options: t, methods: n } = Ue(e, o);\n  return { options: t, methods: n };\n}, Ft = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  popupProps: lt,\n  setupPopup: it\n}, Symbol.toStringTag, { value: \"Module\" })), yo = S({\n  name: \"LPopup\",\n  props: lt,\n  setup(e, o) {\n    const t = c(), n = c(null), s = O(h), r = m(ge), l = m(he), { options: a, methods: i } = it(e, t);\n    return _(async () => {\n      const { popup: u } = s ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      t.value = j(u(a)), e.latLng !== void 0 && t.value.setLatLng(e.latLng), L(i, t.value, e);\n      const { listeners: d } = T(o.attrs);\n      t.value.on(d), t.value.setContent(e.content || n.value || \"\"), r(t.value), g(() => o.emit(\"ready\", t.value));\n    }), R(() => {\n      l();\n    }), { root: n, leafletObject: t };\n  },\n  render() {\n    return De(this.$slots);\n  }\n}), Fe = {\n  ...x,\n  latLngs: {\n    ...x.latLngs,\n    required: !1\n  },\n  bounds: {\n    type: Object,\n    custom: !0\n  }\n}, ut = (e, o, t) => {\n  const { options: n, methods: s } = $e(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    Fe,\n    n\n  ), l = {\n    ...s,\n    setBounds(a) {\n      o.value.setBounds(a);\n    },\n    setLatLngs(a) {\n      o.value.setBounds(a);\n    }\n  };\n  return { options: r, methods: l };\n}, Zt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  rectangleProps: Fe,\n  setupRectangle: ut\n}, Symbol.toStringTag, { value: \"Module\" })), mo = S({\n  name: \"LRectangle\",\n  props: Fe,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { options: l, methods: a } = ut(e, t, o);\n    return _(async () => {\n      const { rectangle: i, latLngBounds: u } = s ? b.L : await import(\"leaflet/dist/leaflet-src.esm\"), d = e.bounds ? u(e.bounds) : u(e.latLngs || []);\n      t.value = j(i(d, l));\n      const { listeners: y } = T(o.attrs);\n      t.value.on(y), L(a, t.value, e), r({\n        ...e,\n        ...a,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), ie = {\n  ...ae,\n  tms: {\n    type: Boolean,\n    default: void 0\n  },\n  subdomains: {\n    type: [String, Array],\n    validator: (e) => typeof e == \"string\" ? !0 : Array.isArray(e) ? e.every((o) => typeof o == \"string\") : !1\n  },\n  detectRetina: {\n    type: Boolean,\n    default: void 0\n  },\n  url: {\n    type: String,\n    required: !0,\n    custom: !0\n  }\n}, Ze = (e, o, t) => {\n  const { options: n, methods: s } = Ae(e, o, t), r = f(\n    e,\n    ie,\n    n\n  ), l = {\n    ...s\n  };\n  return { options: r, methods: l };\n}, Et = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  setupTileLayer: Ze,\n  tileLayerProps: ie\n}, Symbol.toStringTag, { value: \"Module\" })), vo = S({\n  props: ie,\n  setup(e, o) {\n    const t = c(), n = O(h), s = m(M), { options: r, methods: l } = Ze(e, t, o);\n    return _(async () => {\n      const { tileLayer: a } = n ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      t.value = j(a(e.url, r));\n      const { listeners: i } = T(o.attrs);\n      t.value.on(i), L(l, t.value, e), s({\n        ...e,\n        ...l,\n        leafletObject: t.value\n      }), g(() => o.emit(\"ready\", t.value));\n    }), { leafletObject: t };\n  },\n  render() {\n    return null;\n  }\n}), ct = {\n  ...ke\n}, dt = (e, o) => {\n  const { options: t, methods: n } = Ue(e, o), s = m(Oe);\n  return R(() => {\n    s();\n  }), { options: t, methods: n };\n}, Ht = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  setupTooltip: dt,\n  tooltipProps: ct\n}, Symbol.toStringTag, { value: \"Module\" })), bo = S({\n  name: \"LTooltip\",\n  props: ct,\n  setup(e, o) {\n    const t = c(), n = c(null), s = O(h), r = m(Le), { options: l, methods: a } = dt(e, t);\n    return _(async () => {\n      const { tooltip: i } = s ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      t.value = j(i(l)), L(a, t.value, e);\n      const { listeners: u } = T(o.attrs);\n      t.value.on(u), t.value.setContent(e.content || n.value || \"\"), r(t.value), g(() => o.emit(\"ready\", t.value));\n    }), { root: n, leafletObject: t };\n  },\n  render() {\n    return De(this.$slots);\n  }\n}), Ee = {\n  ...ie,\n  layers: {\n    type: String,\n    required: !0\n  },\n  styles: {\n    type: String\n  },\n  format: {\n    type: String\n  },\n  transparent: {\n    type: Boolean,\n    default: void 0\n  },\n  version: {\n    type: String\n  },\n  crs: {\n    type: Object\n  },\n  uppercase: {\n    type: Boolean,\n    default: void 0\n  }\n}, pt = (e, o, t) => {\n  const { options: n, methods: s } = Ze(e, o, t);\n  return {\n    options: f(\n      e,\n      Ee,\n      n\n    ),\n    methods: {\n      ...s\n    }\n  };\n}, Wt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  setupWMSTileLayer: pt,\n  wmsTileLayerProps: Ee\n}, Symbol.toStringTag, { value: \"Module\" })), fo = S({\n  props: Ee,\n  setup(e, o) {\n    const t = c(), n = O(h), s = m(M), { options: r, methods: l } = pt(\n      e,\n      t,\n      o\n    );\n    return _(async () => {\n      const { tileLayer: a } = n ? b.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      t.value = j(\n        a.wms(e.url, r)\n      );\n      const { listeners: i } = T(o.attrs);\n      t.value.on(i), L(l, t.value, e), s({\n        ...e,\n        ...l,\n        leafletObject: t.value\n      }), g(() => o.emit(\"ready\", t.value));\n    }), { leafletObject: t };\n  },\n  render() {\n    return null;\n  }\n}), go = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  Circle: Ot,\n  CircleMarker: ht,\n  Component: bt,\n  Control: St,\n  ControlAttribution: _t,\n  ControlLayers: jt,\n  ControlScale: Pt,\n  ControlZoom: Ct,\n  FeatureGroup: Mt,\n  GeoJSON: Bt,\n  GridLayer: wt,\n  Icon: It,\n  ImageOverlay: At,\n  InteractiveLayer: gt,\n  Layer: ft,\n  LayerGroup: Tt,\n  Marker: $t,\n  Path: Lt,\n  Polygon: Ut,\n  Polyline: kt,\n  Popper: Dt,\n  Popup: Ft,\n  Rectangle: Zt,\n  TileLayer: Et,\n  Tooltip: Ht,\n  WmsTileLayer: Wt\n}, Symbol.toStringTag, { value: \"Module\" }));\nexport {\n  go as Functions,\n  Qt as InjectionKeys,\n  Xt as LCircle,\n  Yt as LCircleMarker,\n  Vt as LControl,\n  xt as LControlAttribution,\n  Rt as LControlLayers,\n  eo as LControlScale,\n  to as LControlZoom,\n  oo as LFeatureGroup,\n  no as LGeoJson,\n  ro as LGridLayer,\n  so as LIcon,\n  ao as LImageOverlay,\n  lo as LLayerGroup,\n  io as LMap,\n  uo as LMarker,\n  co as LPolygon,\n  po as LPolyline,\n  yo as LPopup,\n  mo as LRectangle,\n  vo as LTileLayer,\n  bo as LTooltip,\n  fo as LWmsTileLayer,\n  Kt as Utilities\n};\n",
      "start": 1726488542233,
      "end": 1726488542625,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1726488542625,
      "end": 1726488542625,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1726488542625,
      "end": 1726488542632,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1726488542632,
      "end": 1726488542632,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1726488542632,
      "end": 1726488542632,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1726488542632,
      "end": 1726488542632,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1726488542632,
      "end": 1726488542632,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1726488542632,
      "end": 1726488542632,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1726488542632,
      "end": 1726488542632,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1726488542632,
      "end": 1726488542632,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1726488542632,
      "end": 1726488542632,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1726488542632,
      "end": 1726488542632,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1726488542632,
      "end": 1726488542633,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "result": "import { __vitePreload } from \"\u0000vite/preload-helper.js\";import { watch as He, ref as c, provide as A, inject as O, onUnmounted as pe, h as U, onBeforeUnmount as R, defineComponent as S, onMounted as _, markRaw as j, nextTick as g, render as mt, reactive as vt, computed as oe } from \"vue\";\nconst ce = (e, o) => {\n  for (const t of Object.keys(o))\n    e.on(t, o[t]);\n}, ye = (e) => {\n  for (const o of Object.keys(e)) {\n    const t = e[o];\n    t && k(t.cancel) && t.cancel();\n  }\n}, Je = (e) => !e || typeof e.charAt != \"function\" ? e : e.charAt(0).toUpperCase() + e.slice(1), k = (e) => typeof e == \"function\", L = (e, o, t) => {\n  for (const n in t) {\n    const s = \"set\" + Je(n);\n    e[s] ? He(\n      () => t[n],\n      (r, l) => {\n        e[s](r, l);\n      }\n    ) : o[s] && He(\n      () => t[n],\n      (r) => {\n        o[s](r);\n      }\n    );\n  }\n}, f = (e, o, t = {}) => {\n  const n = { ...t };\n  for (const s in e) {\n    const r = o[s], l = e[s];\n    r && (r && r.custom === !0 || l !== void 0 && (n[s] = l));\n  }\n  return n;\n}, T = (e) => {\n  const o = {}, t = {};\n  for (const n in e)\n    if (n.startsWith(\"on\") && !n.startsWith(\"onUpdate\") && n !== \"onReady\") {\n      const s = n.slice(2).toLocaleLowerCase();\n      o[s] = e[n];\n    } else\n      t[n] = e[n];\n  return { listeners: o, attrs: t };\n}, qe = async (e) => {\n  const o = await Promise.all([\n    __vitePreload(() => import(\"leaflet/dist/images/marker-icon-2x.png\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url),\n    __vitePreload(() => import(\"leaflet/dist/images/marker-icon.png\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url),\n    __vitePreload(() => import(\"leaflet/dist/images/marker-shadow.png\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url)\n  ]);\n  delete e.Default.prototype._getIconUrl, e.Default.mergeOptions({\n    iconRetinaUrl: o[0].default,\n    iconUrl: o[1].default,\n    shadowUrl: o[2].default\n  });\n}, Y = (e) => {\n  const o = c(\n    (...n) => console.warn(`Method ${e} has been invoked without being replaced`)\n  ), t = (...n) => o.value(...n);\n  return t.wrapped = o, A(e, t), t;\n}, V = (e, o) => e.wrapped.value = o, b = typeof self == \"object\" && self.self === self && self || typeof global == \"object\" && global.global === global && global || globalThis, m = (e) => {\n  const o = O(e);\n  if (o === void 0)\n    throw new Error(\n      `Attempt to inject ${e.description} before it was provided.`\n    );\n  return o;\n}, Kt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  WINDOW_OR_GLOBAL: b,\n  assertInject: m,\n  bindEventHandlers: ce,\n  cancelDebounces: ye,\n  capitalizeFirstLetter: Je,\n  isFunction: k,\n  propsBinder: L,\n  propsToLeafletOptions: f,\n  provideLeafletWrapper: Y,\n  remapEvents: T,\n  resetWebpackIcon: qe,\n  updateLeafletWrapper: V\n}, Symbol.toStringTag, { value: \"Module\" })), h = Symbol(\n  \"useGlobalLeaflet\"\n), M = Symbol(\"addLayer\"), ee = Symbol(\"removeLayer\"), H = Symbol(\n  \"registerControl\"\n), me = Symbol(\n  \"registerLayerControl\"\n), ve = Symbol(\n  \"canSetParentHtml\"\n), be = Symbol(\"setParentHtml\"), fe = Symbol(\"setIcon\"), ge = Symbol(\"bindPopup\"), Le = Symbol(\"bindTooltip\"), he = Symbol(\"unbindPopup\"), Oe = Symbol(\"unbindTooltip\"), Qt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  AddLayerInjection: M,\n  BindPopupInjection: ge,\n  BindTooltipInjection: Le,\n  CanSetParentHtmlInjection: ve,\n  RegisterControlInjection: H,\n  RegisterLayerControlInjection: me,\n  RemoveLayerInjection: ee,\n  SetIconInjection: fe,\n  SetParentHtmlInjection: be,\n  UnbindPopupInjection: he,\n  UnbindTooltipInjection: Oe,\n  UseGlobalLeafletInjection: h\n}, Symbol.toStringTag, { value: \"Module\" })), W = {\n  options: {\n    type: Object,\n    default: () => ({}),\n    custom: !0\n  }\n}, J = (e) => ({ options: e.options, methods: {} }), bt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  componentProps: W,\n  setupComponent: J\n}, Symbol.toStringTag, { value: \"Module\" })), D = {\n  ...W,\n  pane: {\n    type: String\n  },\n  attribution: {\n    type: String\n  },\n  name: {\n    type: String,\n    custom: !0\n  },\n  layerType: {\n    type: String,\n    custom: !0\n  },\n  visible: {\n    type: Boolean,\n    custom: !0,\n    default: !0\n  }\n}, q = (e, o, t) => {\n  const n = m(M), s = m(ee), { options: r, methods: l } = J(e), a = f(\n    e,\n    D,\n    r\n  ), i = () => n({ leafletObject: o.value }), u = () => s({ leafletObject: o.value }), d = {\n    ...l,\n    setAttribution(y) {\n      u(), o.value.options.attribution = y, e.visible && i();\n    },\n    setName() {\n      u(), e.visible && i();\n    },\n    setLayerType() {\n      u(), e.visible && i();\n    },\n    setVisible(y) {\n      o.value && (y ? i() : u());\n    },\n    bindPopup(y) {\n      if (!o.value || !k(o.value.bindPopup)) {\n        console.warn(\n          \"Attempt to bind popup before bindPopup method available on layer.\"\n        );\n        return;\n      }\n      o.value.bindPopup(y);\n    },\n    bindTooltip(y) {\n      if (!o.value || !k(o.value.bindTooltip)) {\n        console.warn(\n          \"Attempt to bind tooltip before bindTooltip method available on layer.\"\n        );\n        return;\n      }\n      o.value.bindTooltip(y);\n    },\n    unbindTooltip() {\n      o.value && (k(o.value.closeTooltip) && o.value.closeTooltip(), k(o.value.unbindTooltip) && o.value.unbindTooltip());\n    },\n    unbindPopup() {\n      o.value && (k(o.value.closePopup) && o.value.closePopup(), k(o.value.unbindPopup) && o.value.unbindPopup());\n    },\n    updateVisibleProp(y) {\n      t.emit(\"update:visible\", y);\n    }\n  };\n  return A(ge, d.bindPopup), A(Le, d.bindTooltip), A(he, d.unbindPopup), A(Oe, d.unbindTooltip), pe(() => {\n    d.unbindPopup(), d.unbindTooltip(), u();\n  }), { options: a, methods: d };\n}, G = (e, o) => {\n  if (e && o.default)\n    return U(\"div\", { style: { display: \"none\" } }, o.default());\n}, ft = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  layerProps: D,\n  render: G,\n  setupLayer: q\n}, Symbol.toStringTag, { value: \"Module\" })), Se = {\n  ...D,\n  interactive: {\n    type: Boolean,\n    default: void 0\n  },\n  bubblingMouseEvents: {\n    type: Boolean,\n    default: void 0\n  }\n}, Ke = (e, o, t) => {\n  const { options: n, methods: s } = q(\n    e,\n    o,\n    t\n  );\n  return { options: f(\n    e,\n    Se,\n    n\n  ), methods: s };\n}, gt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  interactiveLayerProps: Se,\n  setupInteractiveLayer: Ke\n}, Symbol.toStringTag, { value: \"Module\" })), ne = {\n  ...Se,\n  stroke: {\n    type: Boolean,\n    default: void 0\n  },\n  color: {\n    type: String\n  },\n  weight: {\n    type: Number\n  },\n  opacity: {\n    type: Number\n  },\n  lineCap: {\n    type: String\n  },\n  lineJoin: {\n    type: String\n  },\n  dashArray: {\n    type: String\n  },\n  dashOffset: {\n    type: String\n  },\n  fill: {\n    type: Boolean,\n    default: void 0\n  },\n  fillColor: {\n    type: String\n  },\n  fillOpacity: {\n    type: Number\n  },\n  fillRule: {\n    type: String\n  },\n  className: {\n    type: String\n  }\n}, _e = (e, o, t) => {\n  const { options: n, methods: s } = Ke(e, o, t), r = f(\n    e,\n    ne,\n    n\n  ), l = m(ee), a = {\n    ...s,\n    setStroke(i) {\n      o.value.setStyle({ stroke: i });\n    },\n    setColor(i) {\n      o.value.setStyle({ color: i });\n    },\n    setWeight(i) {\n      o.value.setStyle({ weight: i });\n    },\n    setOpacity(i) {\n      o.value.setStyle({ opacity: i });\n    },\n    setLineCap(i) {\n      o.value.setStyle({ lineCap: i });\n    },\n    setLineJoin(i) {\n      o.value.setStyle({ lineJoin: i });\n    },\n    setDashArray(i) {\n      o.value.setStyle({ dashArray: i });\n    },\n    setDashOffset(i) {\n      o.value.setStyle({ dashOffset: i });\n    },\n    setFill(i) {\n      o.value.setStyle({ fill: i });\n    },\n    setFillColor(i) {\n      o.value.setStyle({ fillColor: i });\n    },\n    setFillOpacity(i) {\n      o.value.setStyle({ fillOpacity: i });\n    },\n    setFillRule(i) {\n      o.value.setStyle({ fillRule: i });\n    },\n    setClassName(i) {\n      o.value.setStyle({ className: i });\n    }\n  };\n  return R(() => {\n    l({ leafletObject: o.value });\n  }), { options: r, methods: a };\n}, Lt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  pathProps: ne,\n  setupPath: _e\n}, Symbol.toStringTag, { value: \"Module\" })), re = {\n  ...ne,\n  /**\n   * Radius of the marker in pixels.\n   */\n  radius: {\n    type: Number\n  },\n  latLng: {\n    type: [Object, Array],\n    required: !0,\n    custom: !0\n  }\n}, je = (e, o, t) => {\n  const { options: n, methods: s } = _e(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    re,\n    n\n  ), l = {\n    ...s,\n    setRadius(a) {\n      o.value.setRadius(a);\n    },\n    setLatLng(a) {\n      o.value.setLatLng(a);\n    }\n  };\n  return { options: r, methods: l };\n}, ht = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  circleMarkerProps: re,\n  setupCircleMarker: je\n}, Symbol.toStringTag, { value: \"Module\" })), Pe = {\n  ...re,\n  /**\n   * Radius of the circle in meters.\n   */\n  radius: {\n    type: Number\n  }\n}, Qe = (e, o, t) => {\n  const { options: n, methods: s } = je(e, o, t), r = f(\n    e,\n    Pe,\n    n\n  ), l = {\n    ...s\n  };\n  return { options: r, methods: l };\n}, Ot = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  circleProps: Pe,\n  setupCircle: Qe\n}, Symbol.toStringTag, { value: \"Module\" })), Xt = S({\n  name: \"LCircle\",\n  props: Pe,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { options: l, methods: a } = Qe(e, t, o);\n    return _(async () => {\n      const { circle: i } = s ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      t.value = j(i(e.latLng, l));\n      const { listeners: u } = T(o.attrs);\n      t.value.on(u), L(a, t.value, e), r({\n        ...e,\n        ...a,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), Yt = S({\n  name: \"LCircleMarker\",\n  props: re,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { options: l, methods: a } = je(\n      e,\n      t,\n      o\n    );\n    return _(async () => {\n      const { circleMarker: i } = s ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      t.value = j(\n        i(e.latLng, l)\n      );\n      const { listeners: u } = T(o.attrs);\n      t.value.on(u), L(a, t.value, e), r({\n        ...e,\n        ...a,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), F = {\n  ...W,\n  position: {\n    type: String\n  }\n}, K = (e, o) => {\n  const { options: t, methods: n } = J(e), s = f(\n    e,\n    F,\n    t\n  ), r = {\n    ...n,\n    setPosition(l) {\n      o.value && o.value.setPosition(l);\n    }\n  };\n  return pe(() => {\n    o.value && o.value.remove();\n  }), { options: s, methods: r };\n}, Xe = (e) => e.default ? U(\"div\", { ref: \"root\" }, e.default()) : null, St = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  controlProps: F,\n  renderLControl: Xe,\n  setupControl: K\n}, Symbol.toStringTag, { value: \"Module\" })), Vt = S({\n  name: \"LControl\",\n  props: {\n    ...F,\n    disableClickPropagation: {\n      type: Boolean,\n      custom: !0,\n      default: !0\n    },\n    disableScrollPropagation: {\n      type: Boolean,\n      custom: !0,\n      default: !1\n    }\n  },\n  setup(e, o) {\n    const t = c(), n = c(), s = O(h), r = m(H), { options: l, methods: a } = K(e, t);\n    return _(async () => {\n      const { Control: i, DomEvent: u } = s ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url), d = i.extend({\n        onAdd() {\n          return n.value;\n        }\n      });\n      t.value = j(new d(l)), L(a, t.value, e), r({ leafletObject: t.value }), e.disableClickPropagation && n.value && u.disableClickPropagation(n.value), e.disableScrollPropagation && n.value && u.disableScrollPropagation(n.value), g(() => o.emit(\"ready\", t.value));\n    }), { root: n, leafletObject: t };\n  },\n  render() {\n    return Xe(this.$slots);\n  }\n}), Ce = {\n  ...F,\n  prefix: {\n    type: String\n  }\n}, Ye = (e, o) => {\n  const { options: t, methods: n } = K(\n    e,\n    o\n  ), s = f(\n    e,\n    Ce,\n    t\n  ), r = {\n    ...n,\n    setPrefix(l) {\n      o.value.setPrefix(l);\n    }\n  };\n  return { options: s, methods: r };\n}, _t = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  controlAttributionProps: Ce,\n  setupControlAttribution: Ye\n}, Symbol.toStringTag, { value: \"Module\" })), xt = S({\n  name: \"LControlAttribution\",\n  props: Ce,\n  setup(e, o) {\n    const t = c(), n = O(h), s = m(H), { options: r, methods: l } = Ye(e, t);\n    return _(async () => {\n      const { control: a } = n ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      t.value = j(\n        a.attribution(r)\n      ), L(l, t.value, e), s({ leafletObject: t.value }), g(() => o.emit(\"ready\", t.value));\n    }), { leafletObject: t };\n  },\n  render() {\n    return null;\n  }\n}), Te = {\n  ...F,\n  collapsed: {\n    type: Boolean,\n    default: void 0\n  },\n  autoZIndex: {\n    type: Boolean,\n    default: void 0\n  },\n  hideSingleBase: {\n    type: Boolean,\n    default: void 0\n  },\n  sortLayers: {\n    type: Boolean,\n    default: void 0\n  },\n  sortFunction: {\n    type: Function\n  }\n}, Ve = (e, o) => {\n  const { options: t } = K(e, o);\n  return { options: f(\n    e,\n    Te,\n    t\n  ), methods: {\n    addLayer(r) {\n      r.layerType === \"base\" ? o.value.addBaseLayer(r.leafletObject, r.name) : r.layerType === \"overlay\" && o.value.addOverlay(r.leafletObject, r.name);\n    },\n    removeLayer(r) {\n      o.value.removeLayer(r.leafletObject);\n    }\n  } };\n}, jt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  controlLayersProps: Te,\n  setupControlLayers: Ve\n}, Symbol.toStringTag, { value: \"Module\" })), Rt = S({\n  name: \"LControlLayers\",\n  props: Te,\n  setup(e, o) {\n    const t = c(), n = O(h), s = m(me), { options: r, methods: l } = Ve(e, t);\n    return _(async () => {\n      const { control: a } = n ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      t.value = j(\n        a.layers(void 0, void 0, r)\n      ), L(l, t.value, e), s({\n        ...e,\n        ...l,\n        leafletObject: t.value\n      }), g(() => o.emit(\"ready\", t.value));\n    }), { leafletObject: t };\n  },\n  render() {\n    return null;\n  }\n}), Me = {\n  ...F,\n  maxWidth: {\n    type: Number\n  },\n  metric: {\n    type: Boolean,\n    default: void 0\n  },\n  imperial: {\n    type: Boolean,\n    default: void 0\n  },\n  updateWhenIdle: {\n    type: Boolean,\n    default: void 0\n  }\n}, xe = (e, o) => {\n  const { options: t, methods: n } = K(\n    e,\n    o\n  );\n  return { options: f(\n    e,\n    Me,\n    t\n  ), methods: n };\n}, Pt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  controlScaleProps: Me,\n  setupControlScale: xe\n}, Symbol.toStringTag, { value: \"Module\" })), eo = S({\n  name: \"LControlScale\",\n  props: Me,\n  setup(e, o) {\n    const t = c(), n = O(h), s = m(H), { options: r, methods: l } = xe(e, t);\n    return _(async () => {\n      const { control: a } = n ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      t.value = j(a.scale(r)), L(l, t.value, e), s({ leafletObject: t.value }), g(() => o.emit(\"ready\", t.value));\n    }), { leafletObject: t };\n  },\n  render() {\n    return null;\n  }\n}), Be = {\n  ...F,\n  zoomInText: {\n    type: String\n  },\n  zoomInTitle: {\n    type: String\n  },\n  zoomOutText: {\n    type: String\n  },\n  zoomOutTitle: {\n    type: String\n  }\n}, Re = (e, o) => {\n  const { options: t, methods: n } = K(\n    e,\n    o\n  );\n  return { options: f(\n    e,\n    Be,\n    t\n  ), methods: n };\n}, Ct = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  controlZoomProps: Be,\n  setupControlZoom: Re\n}, Symbol.toStringTag, { value: \"Module\" })), to = S({\n  name: \"LControlZoom\",\n  props: Be,\n  setup(e, o) {\n    const t = c(), n = O(h), s = m(H), { options: r, methods: l } = Re(e, t);\n    return _(async () => {\n      const { control: a } = n ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      t.value = j(a.zoom(r)), L(l, t.value, e), s({ leafletObject: t.value }), g(() => o.emit(\"ready\", t.value));\n    }), { leafletObject: t };\n  },\n  render() {\n    return null;\n  }\n}), te = {\n  ...D\n}, se = (e, o, t) => {\n  const { options: n, methods: s } = q(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    te,\n    n\n  ), l = {\n    ...s,\n    addLayer(a) {\n      o.value.addLayer(a.leafletObject);\n    },\n    removeLayer(a) {\n      o.value.removeLayer(a.leafletObject);\n    }\n  };\n  return A(M, l.addLayer), A(ee, l.removeLayer), { options: r, methods: l };\n}, Tt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  layerGroupProps: te,\n  setupLayerGroup: se\n}, Symbol.toStringTag, { value: \"Module\" })), we = {\n  ...te\n}, et = (e, o, t) => {\n  const { options: n, methods: s } = se(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    we,\n    n\n  ), l = {\n    ...s\n  };\n  return { options: r, methods: l };\n}, Mt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  featureGroupProps: we,\n  setupFeatureGroup: et\n}, Symbol.toStringTag, { value: \"Module\" })), oo = S({\n  props: we,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { methods: l, options: a } = et(\n      e,\n      t,\n      o\n    );\n    return _(async () => {\n      const { featureGroup: i } = s ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      t.value = j(\n        i(void 0, a)\n      );\n      const { listeners: u } = T(o.attrs);\n      t.value.on(u), L(l, t.value, e), r({\n        ...e,\n        ...l,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), Ie = {\n  ...te,\n  geojson: {\n    type: [Object, Array],\n    custom: !0\n  },\n  optionsStyle: {\n    type: Function,\n    custom: !0\n  }\n}, tt = (e, o, t) => {\n  const { options: n, methods: s } = se(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    Ie,\n    n\n  );\n  Object.prototype.hasOwnProperty.call(e, \"optionsStyle\") && (r.style = e.optionsStyle);\n  const l = {\n    ...s,\n    setGeojson(a) {\n      o.value.clearLayers(), o.value.addData(a);\n    },\n    setOptionsStyle(a) {\n      o.value.setStyle(a);\n    },\n    getGeoJSONData() {\n      return o.value.toGeoJSON();\n    },\n    getBounds() {\n      return o.value.getBounds();\n    }\n  };\n  return { options: r, methods: l };\n}, Bt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  geoJSONProps: Ie,\n  setupGeoJSON: tt\n}, Symbol.toStringTag, { value: \"Module\" })), no = S({\n  props: Ie,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { methods: l, options: a } = tt(e, t, o);\n    return _(async () => {\n      const { geoJSON: i } = s ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      t.value = j(i(e.geojson, a));\n      const { listeners: u } = T(o.attrs);\n      t.value.on(u), L(l, t.value, e), r({\n        ...e,\n        ...l,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), ae = {\n  ...D,\n  opacity: {\n    type: Number\n  },\n  zIndex: {\n    type: Number\n  },\n  tileSize: {\n    type: [Number, Array, Object]\n  },\n  noWrap: {\n    type: Boolean,\n    default: void 0\n  },\n  minZoom: {\n    type: Number\n  },\n  maxZoom: {\n    type: Number\n  },\n  className: {\n    type: String\n  }\n}, Ae = (e, o, t) => {\n  const { options: n, methods: s } = q(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    ae,\n    n\n  ), l = {\n    ...s,\n    setTileComponent() {\n      var a;\n      (a = o.value) == null || a.redraw();\n    }\n  };\n  return pe(() => {\n    o.value.off();\n  }), { options: r, methods: l };\n}, ot = (e, o, t, n) => e.extend({\n  initialize(s) {\n    this.tileComponents = {}, this.on(\"tileunload\", this._unloadTile), t.setOptions(this, s);\n  },\n  createTile(s) {\n    const r = this._tileCoordsToKey(s);\n    this.tileComponents[r] = o.create(\"div\");\n    const l = U({ setup: n, props: [\"coords\"] }, { coords: s });\n    return mt(l, this.tileComponents[r]), this.tileComponents[r];\n  },\n  _unloadTile(s) {\n    const r = this._tileCoordsToKey(s.coords);\n    this.tileComponents[r] && (this.tileComponents[r].innerHTML = \"\", this.tileComponents[r] = void 0);\n  }\n}), wt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  CreateVueGridLayer: ot,\n  gridLayerProps: ae,\n  setupGridLayer: Ae\n}, Symbol.toStringTag, { value: \"Module\" })), ro = S({\n  props: {\n    ...ae,\n    childRender: {\n      type: Function,\n      required: !0\n    }\n  },\n  setup(e, o) {\n    const t = c(), n = c(null), s = c(!1), r = O(h), l = m(M), { options: a, methods: i } = Ae(e, t, o);\n    return _(async () => {\n      const { GridLayer: u, DomUtil: d, Util: y } = r ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url), w = ot(\n        u,\n        d,\n        y,\n        e.childRender\n      );\n      t.value = j(new w(a));\n      const { listeners: v } = T(o.attrs);\n      t.value.on(v), L(i, t.value, e), l({\n        ...e,\n        ...i,\n        leafletObject: t.value\n      }), s.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { root: n, ready: s, leafletObject: t };\n  },\n  render() {\n    return this.ready ? U(\"div\", { style: { display: \"none\" }, ref: \"root\" }) : null;\n  }\n}), de = {\n  iconUrl: {\n    type: String\n  },\n  iconRetinaUrl: {\n    type: String\n  },\n  iconSize: {\n    type: [Object, Array]\n  },\n  iconAnchor: {\n    type: [Object, Array]\n  },\n  popupAnchor: {\n    type: [Object, Array]\n  },\n  tooltipAnchor: {\n    type: [Object, Array]\n  },\n  shadowUrl: {\n    type: String\n  },\n  shadowRetinaUrl: {\n    type: String\n  },\n  shadowSize: {\n    type: [Object, Array]\n  },\n  shadowAnchor: {\n    type: [Object, Array]\n  },\n  bgPos: {\n    type: [Object, Array]\n  },\n  className: {\n    type: String\n  }\n}, It = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  iconProps: de\n}, Symbol.toStringTag, { value: \"Module\" })), so = S({\n  name: \"LIcon\",\n  props: {\n    ...de,\n    ...W\n  },\n  setup(e, o) {\n    const t = c(), n = O(h), s = m(ve), r = m(be), l = m(fe);\n    let a, i, u, d, y;\n    const w = (N, P, B) => {\n      const I = N && N.innerHTML;\n      if (!P) {\n        B && y && s() && r(I);\n        return;\n      }\n      const { listeners: E } = T(o.attrs);\n      y && i(y, E);\n      const { options: ue } = J(e), $ = f(\n        e,\n        de,\n        ue\n      );\n      I && ($.html = I), y = $.html ? u($) : d($), a(y, E), l(y);\n    }, v = () => {\n      g(() => w(t.value, !0, !1));\n    }, z = () => {\n      g(() => w(t.value, !1, !0));\n    }, Z = {\n      setIconUrl: v,\n      setIconRetinaUrl: v,\n      setIconSize: v,\n      setIconAnchor: v,\n      setPopupAnchor: v,\n      setTooltipAnchor: v,\n      setShadowUrl: v,\n      setShadowRetinaUrl: v,\n      setShadowAnchor: v,\n      setBgPos: v,\n      setClassName: v,\n      setHtml: v\n    };\n    return _(async () => {\n      const {\n        DomEvent: N,\n        divIcon: P,\n        icon: B\n      } = n ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      a = N.on, i = N.off, u = P, d = B, L(Z, {}, e), new MutationObserver(z).observe(t.value, {\n        attributes: !0,\n        childList: !0,\n        characterData: !0,\n        subtree: !0\n      }), v();\n    }), { root: t };\n  },\n  render() {\n    const e = this.$slots.default ? this.$slots.default() : void 0;\n    return U(\"div\", { ref: \"root\" }, e);\n  }\n}), Ge = {\n  ...D,\n  opacity: {\n    type: Number\n  },\n  alt: {\n    type: String\n  },\n  interactive: {\n    type: Boolean,\n    default: void 0\n  },\n  crossOrigin: {\n    type: Boolean,\n    default: void 0\n  },\n  errorOverlayUrl: {\n    type: String\n  },\n  zIndex: {\n    type: Number\n  },\n  className: {\n    type: String\n  },\n  url: {\n    type: String,\n    required: !0,\n    custom: !0\n  },\n  bounds: {\n    type: [Array, Object],\n    required: !0,\n    custom: !0\n  }\n}, nt = (e, o, t) => {\n  const { options: n, methods: s } = q(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    Ge,\n    n\n  ), l = {\n    ...s,\n    /**\n     * Sets the opacity of the overlay.\n     * @param {number} opacity\n     */\n    setOpacity(a) {\n      return o.value.setOpacity(a);\n    },\n    /**\n     * Changes the URL of the image.\n     * @param {string} url\n     */\n    setUrl(a) {\n      return o.value.setUrl(a);\n    },\n    /**\n     * Update the bounds that this ImageOverlay covers\n     * @param {LatLngBounds | Array<Array<number>>} bounds\n     */\n    setBounds(a) {\n      return o.value.setBounds(a);\n    },\n    /**\n     * Get the bounds that this ImageOverlay covers\n     * @returns {LatLngBounds}\n     */\n    getBounds() {\n      return o.value.getBounds();\n    },\n    /**\n     * Returns the instance of HTMLImageElement used by this overlay.\n     * @returns {HTMLElement}\n     */\n    getElement() {\n      return o.value.getElement();\n    },\n    /**\n     * Brings the layer to the top of all overlays.\n     */\n    bringToFront() {\n      return o.value.bringToFront();\n    },\n    /**\n     * Brings the layer to the bottom of all overlays.\n     */\n    bringToBack() {\n      return o.value.bringToBack();\n    },\n    /**\n     * Changes the zIndex of the image overlay.\n     * @param {number} zIndex\n     */\n    setZIndex(a) {\n      return o.value.setZIndex(a);\n    }\n  };\n  return { options: r, methods: l };\n}, At = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  imageOverlayProps: Ge,\n  setupImageOverlay: nt\n}, Symbol.toStringTag, { value: \"Module\" })), ao = S({\n  name: \"LImageOverlay\",\n  props: Ge,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { options: l, methods: a } = nt(\n      e,\n      t,\n      o\n    );\n    return _(async () => {\n      const { imageOverlay: i } = s ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      t.value = j(\n        i(e.url, e.bounds, l)\n      );\n      const { listeners: u } = T(o.attrs);\n      t.value.on(u), L(a, t.value, e), r({\n        ...e,\n        ...a,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), lo = S({\n  props: te,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { methods: l } = se(e, t, o);\n    return _(async () => {\n      const { layerGroup: a } = s ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      t.value = j(\n        a(void 0, e.options)\n      );\n      const { listeners: i } = T(o.attrs);\n      t.value.on(i), L(l, t.value, e), r({\n        ...e,\n        ...l,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n});\nfunction rt(e, o, t) {\n  var n, s, r;\n  o === void 0 && (o = 50), t === void 0 && (t = {});\n  var l = (n = t.isImmediate) != null && n, a = (s = t.callback) != null && s, i = t.maxWait, u = Date.now(), d = [];\n  function y() {\n    if (i !== void 0) {\n      var v = Date.now() - u;\n      if (v + o >= i)\n        return i - v;\n    }\n    return o;\n  }\n  var w = function() {\n    var v = [].slice.call(arguments), z = this;\n    return new Promise(function(Z, N) {\n      var P = l && r === void 0;\n      if (r !== void 0 && clearTimeout(r), r = setTimeout(function() {\n        if (r = void 0, u = Date.now(), !l) {\n          var I = e.apply(z, v);\n          a && a(I), d.forEach(function(E) {\n            return (0, E.resolve)(I);\n          }), d = [];\n        }\n      }, y()), P) {\n        var B = e.apply(z, v);\n        return a && a(B), Z(B);\n      }\n      d.push({ resolve: Z, reject: N });\n    });\n  };\n  return w.cancel = function(v) {\n    r !== void 0 && clearTimeout(r), d.forEach(function(z) {\n      return (0, z.reject)(v);\n    }), d = [];\n  }, w;\n}\nconst We = {\n  ...W,\n  /**\n   * The center of the map, supports .sync modifier\n   */\n  center: {\n    type: [Object, Array]\n  },\n  /**\n   * The bounds of the map, supports .sync modifier\n   */\n  bounds: {\n    type: [Array, Object]\n  },\n  /**\n   * The max bounds of the map\n   */\n  maxBounds: {\n    type: [Array, Object]\n  },\n  /**\n   * The zoom of the map, supports .sync modifier\n   */\n  zoom: {\n    type: Number\n  },\n  /**\n   * The minZoom of the map\n   */\n  minZoom: {\n    type: Number\n  },\n  /**\n   * The maxZoom of the map\n   */\n  maxZoom: {\n    type: Number\n  },\n  /**\n   * The paddingBottomRight of the map\n   */\n  paddingBottomRight: {\n    type: [Object, Array]\n  },\n  /**\n   * The paddingTopLeft of the map\n   */\n  paddingTopLeft: {\n    type: Object\n  },\n  /**\n   * The padding of the map\n   */\n  padding: {\n    type: Object\n  },\n  /**\n   * The worldCopyJump option for the map\n   */\n  worldCopyJump: {\n    type: Boolean,\n    default: void 0\n  },\n  /**\n   * The CRS to use for the map. Can be an object that defines a coordinate reference\n   * system for projecting geographical points into screen coordinates and back\n   * (see https://leafletjs.com/reference-1.7.1.html#crs-l-crs-base), or a string\n   * name identifying one of Leaflet's defined CRSs, such as \"EPSG4326\".\n   */\n  crs: {\n    type: [String, Object]\n  },\n  maxBoundsViscosity: {\n    type: Number\n  },\n  inertia: {\n    type: Boolean,\n    default: void 0\n  },\n  inertiaDeceleration: {\n    type: Number\n  },\n  inertiaMaxSpeed: {\n    type: Number\n  },\n  easeLinearity: {\n    type: Number\n  },\n  zoomAnimation: {\n    type: Boolean,\n    default: void 0\n  },\n  zoomAnimationThreshold: {\n    type: Number\n  },\n  fadeAnimation: {\n    type: Boolean,\n    default: void 0\n  },\n  markerZoomAnimation: {\n    type: Boolean,\n    default: void 0\n  },\n  noBlockingAnimations: {\n    type: Boolean,\n    default: void 0\n  },\n  useGlobalLeaflet: {\n    type: Boolean,\n    default: !0,\n    custom: !0\n  }\n}, io = S({\n  inheritAttrs: !1,\n  emits: [\"ready\", \"update:zoom\", \"update:center\", \"update:bounds\"],\n  props: We,\n  setup(e, o) {\n    const t = c(), n = vt({\n      ready: !1,\n      layersToAdd: [],\n      layersInControl: []\n    }), { options: s } = J(e), r = f(\n      e,\n      We,\n      s\n    ), { listeners: l, attrs: a } = T(o.attrs), i = Y(M), u = Y(ee), d = Y(H), y = Y(\n      me\n    );\n    A(h, e.useGlobalLeaflet);\n    const w = oe(() => {\n      const P = {};\n      return e.noBlockingAnimations && (P.animate = !1), P;\n    }), v = oe(() => {\n      const P = w.value;\n      return e.padding && (P.padding = e.padding), e.paddingTopLeft && (P.paddingTopLeft = e.paddingTopLeft), e.paddingBottomRight && (P.paddingBottomRight = e.paddingBottomRight), P;\n    }), z = {\n      moveend: rt((P) => {\n        n.leafletRef && (o.emit(\"update:zoom\", n.leafletRef.getZoom()), o.emit(\"update:center\", n.leafletRef.getCenter()), o.emit(\"update:bounds\", n.leafletRef.getBounds()));\n      }),\n      overlayadd(P) {\n        const B = n.layersInControl.find((I) => I.name === P.name);\n        B && B.updateVisibleProp(!0);\n      },\n      overlayremove(P) {\n        const B = n.layersInControl.find((I) => I.name === P.name);\n        B && B.updateVisibleProp(!1);\n      }\n    };\n    _(async () => {\n      e.useGlobalLeaflet && (b.L = b.L || await __vitePreload(() => import(\"leaflet\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url));\n      const { map: P, CRS: B, Icon: I, latLngBounds: E, latLng: ue, stamp: $ } = e.useGlobalLeaflet ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      try {\n        r.beforeMapMount && await r.beforeMapMount();\n      } catch (p) {\n        console.error(\n          `The following error occurred running the provided beforeMapMount hook ${p.message}`\n        );\n      }\n      await qe(I);\n      const yt = typeof r.crs == \"string\" ? B[r.crs] : r.crs;\n      r.crs = yt || B.EPSG3857;\n      const Q = {\n        addLayer(p) {\n          p.layerType !== void 0 && (n.layerControl === void 0 ? n.layersToAdd.push(p) : n.layersInControl.find(\n            (X) => $(X.leafletObject) === $(p.leafletObject)\n          ) || (n.layerControl.addLayer(p), n.layersInControl.push(p))), p.visible !== !1 && n.leafletRef.addLayer(p.leafletObject);\n        },\n        removeLayer(p) {\n          p.layerType !== void 0 && (n.layerControl === void 0 ? n.layersToAdd = n.layersToAdd.filter(\n            (C) => C.name !== p.name\n          ) : (n.layerControl.removeLayer(p.leafletObject), n.layersInControl = n.layersInControl.filter(\n            (C) => $(C.leafletObject) !== $(p.leafletObject)\n          ))), n.leafletRef.removeLayer(p.leafletObject);\n        },\n        registerLayerControl(p) {\n          n.layerControl = p, n.layersToAdd.forEach((C) => {\n            n.layerControl.addLayer(C);\n          }), n.layersToAdd = [], d(p);\n        },\n        registerControl(p) {\n          n.leafletRef.addControl(p.leafletObject);\n        },\n        setZoom(p) {\n          const C = n.leafletRef.getZoom();\n          p !== C && n.leafletRef.setZoom(p, w.value);\n        },\n        setCrs(p) {\n          const C = n.leafletRef.getBounds();\n          n.leafletRef.options.crs = p, n.leafletRef.fitBounds(C, {\n            animate: !1,\n            padding: [0, 0]\n          });\n        },\n        fitBounds(p) {\n          n.leafletRef.fitBounds(p, v.value);\n        },\n        setBounds(p) {\n          if (!p)\n            return;\n          const C = E(p);\n          if (!C.isValid())\n            return;\n          !(n.lastSetBounds || n.leafletRef.getBounds()).equals(C, 0) && (n.lastSetBounds = C, n.leafletRef.fitBounds(C));\n        },\n        setCenter(p) {\n          if (p == null)\n            return;\n          const C = ue(p), X = n.lastSetCenter || n.leafletRef.getCenter();\n          (X.lat !== C.lat || X.lng !== C.lng) && (n.lastSetCenter = C, n.leafletRef.panTo(C, w.value));\n        }\n      };\n      V(i, Q.addLayer), V(u, Q.removeLayer), V(d, Q.registerControl), V(y, Q.registerLayerControl), n.leafletRef = j(P(t.value, r)), L(Q, n.leafletRef, e), ce(n.leafletRef, z), ce(n.leafletRef, l), n.ready = !0, g(() => o.emit(\"ready\", n.leafletRef));\n    }), R(() => {\n      ye(z), n.leafletRef && (n.leafletRef.off(), n.leafletRef.remove());\n    });\n    const Z = oe(() => n.leafletRef), N = oe(() => n.ready);\n    return { root: t, ready: N, leafletObject: Z, attrs: a };\n  },\n  render({ attrs: e }) {\n    return e.style || (e.style = {}), e.style.width || (e.style.width = \"100%\"), e.style.height || (e.style.height = \"100%\"), U(\n      \"div\",\n      {\n        ...e,\n        ref: \"root\"\n      },\n      this.ready && this.$slots.default ? this.$slots.default() : {}\n    );\n  }\n}), Gt = [\"Symbol(Comment)\", \"Symbol(Text)\"], zt = [\"LTooltip\", \"LPopup\"], ze = {\n  ...D,\n  draggable: {\n    type: Boolean,\n    default: void 0\n  },\n  icon: {\n    type: [Object]\n  },\n  zIndexOffset: {\n    type: Number\n  },\n  latLng: {\n    type: [Object, Array],\n    custom: !0,\n    required: !0\n  }\n}, st = (e, o, t) => {\n  const { options: n, methods: s } = q(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    ze,\n    n\n  ), l = {\n    ...s,\n    setDraggable(a) {\n      o.value.dragging && (a ? o.value.dragging.enable() : o.value.dragging.disable());\n    },\n    latLngSync(a) {\n      t.emit(\"update:latLng\", a.latlng), t.emit(\"update:lat-lng\", a.latlng);\n    },\n    setLatLng(a) {\n      if (a != null && o.value) {\n        const i = o.value.getLatLng();\n        (!i || !i.equals(a)) && o.value.setLatLng(a);\n      }\n    }\n  };\n  return { options: r, methods: l };\n}, at = (e, o) => {\n  const t = o.slots.default && o.slots.default();\n  return t && t.length && t.some(Nt);\n};\nfunction Nt(e) {\n  return !(Gt.includes(e.type.toString()) || zt.includes(e.type.name));\n}\nconst $t = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  markerProps: ze,\n  setupMarker: st,\n  shouldBlankIcon: at\n}, Symbol.toStringTag, { value: \"Module\" })), uo = S({\n  name: \"LMarker\",\n  props: ze,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M);\n    A(\n      ve,\n      () => {\n        var u;\n        return !!((u = t.value) != null && u.getElement());\n      }\n    ), A(be, (u) => {\n      var y, w;\n      const d = k((y = t.value) == null ? void 0 : y.getElement) && ((w = t.value) == null ? void 0 : w.getElement());\n      d && (d.innerHTML = u);\n    }), A(\n      fe,\n      (u) => {\n        var d;\n        return ((d = t.value) == null ? void 0 : d.setIcon) && t.value.setIcon(u);\n      }\n    );\n    const { options: l, methods: a } = st(e, t, o), i = {\n      moveHandler: rt(a.latLngSync)\n    };\n    return _(async () => {\n      const { marker: u, divIcon: d } = s ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      at(l, o) && (l.icon = d({ className: \"\" })), t.value = j(u(e.latLng, l));\n      const { listeners: y } = T(o.attrs);\n      t.value.on(y), t.value.on(\"move\", i.moveHandler), L(a, t.value, e), r({\n        ...e,\n        ...a,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), R(() => ye(i)), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), le = {\n  ...ne,\n  smoothFactor: {\n    type: Number\n  },\n  noClip: {\n    type: Boolean,\n    default: void 0\n  },\n  latLngs: {\n    type: Array,\n    required: !0,\n    custom: !0\n  }\n}, Ne = (e, o, t) => {\n  const { options: n, methods: s } = _e(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    le,\n    n\n  ), l = {\n    ...s,\n    setSmoothFactor(a) {\n      o.value.setStyle({ smoothFactor: a });\n    },\n    setNoClip(a) {\n      o.value.setStyle({ noClip: a });\n    },\n    addLatLng(a) {\n      o.value.addLatLng(a);\n    }\n  };\n  return { options: r, methods: l };\n}, kt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  polylineProps: le,\n  setupPolyline: Ne\n}, Symbol.toStringTag, { value: \"Module\" })), x = {\n  ...le\n}, $e = (e, o, t) => {\n  const { options: n, methods: s } = Ne(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    x,\n    n\n  ), l = {\n    ...s,\n    toGeoJSON(a) {\n      return o.value.toGeoJSON(a);\n    }\n  };\n  return { options: r, methods: l };\n}, Ut = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  polygonProps: x,\n  setupPolygon: $e\n}, Symbol.toStringTag, { value: \"Module\" })), co = S({\n  name: \"LPolygon\",\n  props: x,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { options: l, methods: a } = $e(e, t, o);\n    return _(async () => {\n      const { polygon: i } = s ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      t.value = j(i(e.latLngs, l));\n      const { listeners: u } = T(o.attrs);\n      t.value.on(u), L(a, t.value, e), r({\n        ...e,\n        ...a,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), po = S({\n  name: \"LPolyline\",\n  props: le,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { options: l, methods: a } = Ne(e, t, o);\n    return _(async () => {\n      const { polyline: i } = s ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      t.value = j(\n        i(e.latLngs, l)\n      );\n      const { listeners: u } = T(o.attrs);\n      t.value.on(u), L(a, t.value, e), r({\n        ...e,\n        ...a,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), ke = {\n  ...W,\n  content: {\n    type: String,\n    default: null\n  }\n}, Ue = (e, o) => {\n  const { options: t, methods: n } = J(e), s = {\n    ...n,\n    setContent(r) {\n      o.value && r !== null && r !== void 0 && o.value.setContent(r);\n    }\n  };\n  return { options: t, methods: s };\n}, De = (e) => e.default ? U(\"div\", { ref: \"root\" }, e.default()) : null, Dt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  popperProps: ke,\n  render: De,\n  setupPopper: Ue\n}, Symbol.toStringTag, { value: \"Module\" })), lt = {\n  ...ke,\n  latLng: {\n    type: [Object, Array],\n    default: () => []\n  }\n}, it = (e, o) => {\n  const { options: t, methods: n } = Ue(e, o);\n  return { options: t, methods: n };\n}, Ft = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  popupProps: lt,\n  setupPopup: it\n}, Symbol.toStringTag, { value: \"Module\" })), yo = S({\n  name: \"LPopup\",\n  props: lt,\n  setup(e, o) {\n    const t = c(), n = c(null), s = O(h), r = m(ge), l = m(he), { options: a, methods: i } = it(e, t);\n    return _(async () => {\n      const { popup: u } = s ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      t.value = j(u(a)), e.latLng !== void 0 && t.value.setLatLng(e.latLng), L(i, t.value, e);\n      const { listeners: d } = T(o.attrs);\n      t.value.on(d), t.value.setContent(e.content || n.value || \"\"), r(t.value), g(() => o.emit(\"ready\", t.value));\n    }), R(() => {\n      l();\n    }), { root: n, leafletObject: t };\n  },\n  render() {\n    return De(this.$slots);\n  }\n}), Fe = {\n  ...x,\n  latLngs: {\n    ...x.latLngs,\n    required: !1\n  },\n  bounds: {\n    type: Object,\n    custom: !0\n  }\n}, ut = (e, o, t) => {\n  const { options: n, methods: s } = $e(\n    e,\n    o,\n    t\n  ), r = f(\n    e,\n    Fe,\n    n\n  ), l = {\n    ...s,\n    setBounds(a) {\n      o.value.setBounds(a);\n    },\n    setLatLngs(a) {\n      o.value.setBounds(a);\n    }\n  };\n  return { options: r, methods: l };\n}, Zt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  rectangleProps: Fe,\n  setupRectangle: ut\n}, Symbol.toStringTag, { value: \"Module\" })), mo = S({\n  name: \"LRectangle\",\n  props: Fe,\n  setup(e, o) {\n    const t = c(), n = c(!1), s = O(h), r = m(M), { options: l, methods: a } = ut(e, t, o);\n    return _(async () => {\n      const { rectangle: i, latLngBounds: u } = s ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url), d = e.bounds ? u(e.bounds) : u(e.latLngs || []);\n      t.value = j(i(d, l));\n      const { listeners: y } = T(o.attrs);\n      t.value.on(y), L(a, t.value, e), r({\n        ...e,\n        ...a,\n        leafletObject: t.value\n      }), n.value = !0, g(() => o.emit(\"ready\", t.value));\n    }), { ready: n, leafletObject: t };\n  },\n  render() {\n    return G(this.ready, this.$slots);\n  }\n}), ie = {\n  ...ae,\n  tms: {\n    type: Boolean,\n    default: void 0\n  },\n  subdomains: {\n    type: [String, Array],\n    validator: (e) => typeof e == \"string\" ? !0 : Array.isArray(e) ? e.every((o) => typeof o == \"string\") : !1\n  },\n  detectRetina: {\n    type: Boolean,\n    default: void 0\n  },\n  url: {\n    type: String,\n    required: !0,\n    custom: !0\n  }\n}, Ze = (e, o, t) => {\n  const { options: n, methods: s } = Ae(e, o, t), r = f(\n    e,\n    ie,\n    n\n  ), l = {\n    ...s\n  };\n  return { options: r, methods: l };\n}, Et = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  setupTileLayer: Ze,\n  tileLayerProps: ie\n}, Symbol.toStringTag, { value: \"Module\" })), vo = S({\n  props: ie,\n  setup(e, o) {\n    const t = c(), n = O(h), s = m(M), { options: r, methods: l } = Ze(e, t, o);\n    return _(async () => {\n      const { tileLayer: a } = n ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      t.value = j(a(e.url, r));\n      const { listeners: i } = T(o.attrs);\n      t.value.on(i), L(l, t.value, e), s({\n        ...e,\n        ...l,\n        leafletObject: t.value\n      }), g(() => o.emit(\"ready\", t.value));\n    }), { leafletObject: t };\n  },\n  render() {\n    return null;\n  }\n}), ct = {\n  ...ke\n}, dt = (e, o) => {\n  const { options: t, methods: n } = Ue(e, o), s = m(Oe);\n  return R(() => {\n    s();\n  }), { options: t, methods: n };\n}, Ht = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  setupTooltip: dt,\n  tooltipProps: ct\n}, Symbol.toStringTag, { value: \"Module\" })), bo = S({\n  name: \"LTooltip\",\n  props: ct,\n  setup(e, o) {\n    const t = c(), n = c(null), s = O(h), r = m(Le), { options: l, methods: a } = dt(e, t);\n    return _(async () => {\n      const { tooltip: i } = s ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      t.value = j(i(l)), L(a, t.value, e);\n      const { listeners: u } = T(o.attrs);\n      t.value.on(u), t.value.setContent(e.content || n.value || \"\"), r(t.value), g(() => o.emit(\"ready\", t.value));\n    }), { root: n, leafletObject: t };\n  },\n  render() {\n    return De(this.$slots);\n  }\n}), Ee = {\n  ...ie,\n  layers: {\n    type: String,\n    required: !0\n  },\n  styles: {\n    type: String\n  },\n  format: {\n    type: String\n  },\n  transparent: {\n    type: Boolean,\n    default: void 0\n  },\n  version: {\n    type: String\n  },\n  crs: {\n    type: Object\n  },\n  uppercase: {\n    type: Boolean,\n    default: void 0\n  }\n}, pt = (e, o, t) => {\n  const { options: n, methods: s } = Ze(e, o, t);\n  return {\n    options: f(\n      e,\n      Ee,\n      n\n    ),\n    methods: {\n      ...s\n    }\n  };\n}, Wt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  setupWMSTileLayer: pt,\n  wmsTileLayerProps: Ee\n}, Symbol.toStringTag, { value: \"Module\" })), fo = S({\n  props: Ee,\n  setup(e, o) {\n    const t = c(), n = O(h), s = m(M), { options: r, methods: l } = pt(\n      e,\n      t,\n      o\n    );\n    return _(async () => {\n      const { tileLayer: a } = n ? b.L : await __vitePreload(() => import(\"leaflet/dist/leaflet-src.esm\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n      t.value = j(\n        a.wms(e.url, r)\n      );\n      const { listeners: i } = T(o.attrs);\n      t.value.on(i), L(l, t.value, e), s({\n        ...e,\n        ...l,\n        leafletObject: t.value\n      }), g(() => o.emit(\"ready\", t.value));\n    }), { leafletObject: t };\n  },\n  render() {\n    return null;\n  }\n}), go = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  Circle: Ot,\n  CircleMarker: ht,\n  Component: bt,\n  Control: St,\n  ControlAttribution: _t,\n  ControlLayers: jt,\n  ControlScale: Pt,\n  ControlZoom: Ct,\n  FeatureGroup: Mt,\n  GeoJSON: Bt,\n  GridLayer: wt,\n  Icon: It,\n  ImageOverlay: At,\n  InteractiveLayer: gt,\n  Layer: ft,\n  LayerGroup: Tt,\n  Marker: $t,\n  Path: Lt,\n  Polygon: Ut,\n  Polyline: kt,\n  Popper: Dt,\n  Popup: Ft,\n  Rectangle: Zt,\n  TileLayer: Et,\n  Tooltip: Ht,\n  WmsTileLayer: Wt\n}, Symbol.toStringTag, { value: \"Module\" }));\nexport {\n  go as Functions,\n  Qt as InjectionKeys,\n  Xt as LCircle,\n  Yt as LCircleMarker,\n  Vt as LControl,\n  xt as LControlAttribution,\n  Rt as LControlLayers,\n  eo as LControlScale,\n  to as LControlZoom,\n  oo as LFeatureGroup,\n  no as LGeoJson,\n  ro as LGridLayer,\n  so as LIcon,\n  ao as LImageOverlay,\n  lo as LLayerGroup,\n  io as LMap,\n  uo as LMarker,\n  co as LPolygon,\n  po as LPolyline,\n  yo as LPopup,\n  mo as LRectangle,\n  vo as LTileLayer,\n  bo as LTooltip,\n  fo as LWmsTileLayer,\n  Kt as Utilities\n};\n",
      "start": 1726488542633,
      "end": 1726488542633,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:reporter",
      "start": 1726488542633,
      "end": 1726488542633,
      "order": "normal"
    }
  ]
}
