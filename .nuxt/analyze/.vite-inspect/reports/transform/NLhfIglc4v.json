{
  "resolvedId": "/home/saeed/w/projects/beautymap/beautyfront/node_modules/nuxt-auth-sanctum/dist/runtime/plugin.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { FetchError } from \"ofetch\";\nimport { defineNuxtPlugin, useState } from \"#app\";\nimport { createHttpClient } from \"./httpFactory.mjs\";\nimport { useSanctumUser } from \"./composables/useSanctumUser.mjs\";\nimport { useSanctumConfig } from \"./composables/useSanctumConfig.mjs\";\nimport { createConsola } from \"consola\";\nconst LOGGER_NAME = \"nuxt-auth-sanctum\";\nfunction createSanctumLogger(logLevel) {\n  const envSuffix = import.meta.env.SSR ? \"ssr\" : \"csr\";\n  const loggerName = LOGGER_NAME + \":\" + envSuffix;\n  return createConsola({ level: logLevel }).withTag(loggerName);\n}\nfunction handleIdentityLoadError(error, logger) {\n  if (error instanceof FetchError && error.response && [401, 419].includes(error.response.status)) {\n    logger.debug(\n      \"User is not authenticated on plugin initialization, status:\",\n      error.response.status\n    );\n  } else {\n    logger.error(\"Unable to load user identity from API\", error);\n  }\n}\nexport default defineNuxtPlugin(async () => {\n  const user = useSanctumUser();\n  const options = useSanctumConfig();\n  const logger = createSanctumLogger(options.logLevel);\n  const client = createHttpClient(logger);\n  const identityFetchedOnInit = useState(\n    \"sanctum.user.loaded\",\n    () => false\n  );\n  if (user.value === null && identityFetchedOnInit.value === false) {\n    identityFetchedOnInit.value = true;\n    try {\n      logger.debug(\"Fetching user identity on plugin initialization\");\n      user.value = await client(options.endpoints.user);\n    } catch (error) {\n      handleIdentityLoadError(error, logger);\n    }\n  }\n  return {\n    provide: {\n      sanctumClient: client\n    }\n  };\n});\n",
      "start": 1726488536613,
      "end": 1726488536771,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1726488536771,
      "end": 1726488536771,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1726488536771,
      "end": 1726488536771,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1726488536771,
      "end": 1726488536771,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1726488536771,
      "end": 1726488536771,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1726488536771,
      "end": 1726488536771,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1726488536771,
      "end": 1726488536771,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1726488536771,
      "end": 1726488536771,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1726488536771,
      "end": 1726488536771,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1726488536771,
      "end": 1726488536771,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726488536771,
      "end": 1726488536771,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1726488536771,
      "end": 1726488536772,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1726488536772,
      "end": 1726488536772,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1726488536772,
      "end": 1726488536772,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726488536772,
      "end": 1726488536772,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1726488536772,
      "end": 1726488536772,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { FetchError } from \"ofetch\";\nimport { defineNuxtPlugin, useState } from \"#app\";\nimport { createHttpClient } from \"./httpFactory.mjs\";\nimport { useSanctumUser } from \"./composables/useSanctumUser.mjs\";\nimport { useSanctumConfig } from \"./composables/useSanctumConfig.mjs\";\nimport { createConsola } from \"consola\";\nconst LOGGER_NAME = \"nuxt-auth-sanctum\";\nfunction createSanctumLogger(logLevel) {\n  const envSuffix = false ? \"ssr\" : \"csr\";\n  const loggerName = LOGGER_NAME + \":\" + envSuffix;\n  return createConsola({ level: logLevel }).withTag(loggerName);\n}\nfunction handleIdentityLoadError(error, logger) {\n  if (error instanceof FetchError && error.response && [401, 419].includes(error.response.status)) {\n    logger.debug(\n      \"User is not authenticated on plugin initialization, status:\",\n      error.response.status\n    );\n  } else {\n    logger.error(\"Unable to load user identity from API\", error);\n  }\n}\nexport default defineNuxtPlugin(async () => {\n  const user = useSanctumUser();\n  const options = useSanctumConfig();\n  const logger = createSanctumLogger(options.logLevel);\n  const client = createHttpClient(logger);\n  const identityFetchedOnInit = useState(\n    \"sanctum.user.loaded\",\n    () => false\n  );\n  if (user.value === null && identityFetchedOnInit.value === false) {\n    identityFetchedOnInit.value = true;\n    try {\n      logger.debug(\"Fetching user identity on plugin initialization\");\n      user.value = await client(options.endpoints.user);\n    } catch (error) {\n      handleIdentityLoadError(error, logger);\n    }\n  }\n  return {\n    provide: {\n      sanctumClient: client\n    }\n  };\n});\n",
      "start": 1726488536772,
      "end": 1726488536835,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1726488536835,
      "end": 1726488536835,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1726488536835,
      "end": 1726488536835,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1726488536835,
      "end": 1726488536835,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1726488536835,
      "end": 1726488536835,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1726488536835,
      "end": 1726488536835,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1726488536835,
      "end": 1726488536836,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1726488536836,
      "end": 1726488536836,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1726488536836,
      "end": 1726488536838,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1726488536838,
      "end": 1726488536839,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "result": "/* _processed_nuxt_unctx_transform */\nimport { executeAsync as __executeAsync } from \"/home/saeed/w/projects/beautymap/beautyfront/node_modules/unctx/dist/index.mjs\";import { FetchError } from \"ofetch\";\nimport { defineNuxtPlugin, useState } from \"#app\";\nimport { createHttpClient } from \"./httpFactory.mjs\";\nimport { useSanctumUser } from \"./composables/useSanctumUser.mjs\";\nimport { useSanctumConfig } from \"./composables/useSanctumConfig.mjs\";\nimport { createConsola } from \"consola\";\nconst LOGGER_NAME = \"nuxt-auth-sanctum\";\nfunction createSanctumLogger(logLevel) {\n  const envSuffix = false ? \"ssr\" : \"csr\";\n  const loggerName = LOGGER_NAME + \":\" + envSuffix;\n  return createConsola({ level: logLevel }).withTag(loggerName);\n}\nfunction handleIdentityLoadError(error, logger) {\n  if (error instanceof FetchError && error.response && [401, 419].includes(error.response.status)) {\n    logger.debug(\n      \"User is not authenticated on plugin initialization, status:\",\n      error.response.status\n    );\n  } else {\n    logger.error(\"Unable to load user identity from API\", error);\n  }\n}\nexport default defineNuxtPlugin(async () => {let __temp, __restore;\n  const user = useSanctumUser();\n  const options = useSanctumConfig();\n  const logger = createSanctumLogger(options.logLevel);\n  const client = createHttpClient(logger);\n  const identityFetchedOnInit = useState(\n    \"sanctum.user.loaded\",\n    () => false\n  );\n  if (user.value === null && identityFetchedOnInit.value === false) {\n    identityFetchedOnInit.value = true;\n    try {\n      logger.debug(\"Fetching user identity on plugin initialization\");\n      user.value = (([__temp,__restore]=__executeAsync(()=>client(options.endpoints.user))),__temp=await __temp,__restore(),__temp);\n    } catch (error) {\n      handleIdentityLoadError(error, logger);\n    }\n  }\n  return {\n    provide: {\n      sanctumClient: client\n    }\n  };\n},1);\n",
      "start": 1726488536839,
      "end": 1726488536841,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "gIAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC;AACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjpG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpjE,CAAC,CAAC,CAAC;AACH,CAAC;AACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,uBAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,yCAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,2CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC;AACJ,GAAC,CAAC,CAAC;"
      }
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1726488536841,
      "end": 1726488536841,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1726488536841,
      "end": 1726488536841,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1726488536841,
      "end": 1726488536841,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1726488536841,
      "end": 1726488536841,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1726488536841,
      "end": 1726488536841,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1726488536841,
      "end": 1726488536841,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1726488536841,
      "end": 1726488536841,
      "order": "normal"
    }
  ]
}
