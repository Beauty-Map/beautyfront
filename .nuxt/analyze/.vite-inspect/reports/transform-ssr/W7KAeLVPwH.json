{
  "resolvedId": "/home/saeed/w/projects/beautymap/beautyfront/composables/useCustomFetch.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "export const useCustomFetch = async (url: string, opts: Object) => {\r\n    const config = useRuntimeConfig()\r\n\r\n    const xsrfToken = useCookie('XSRF-TOKEN')\r\n    let headers = {\r\n        accept: 'application/json',\r\n        ...opts?.headers,\r\n    }\r\n    if (xsrfToken && xsrfToken.value !== null) {\r\n        headers['X-XSRF-TOKEN'] = xsrfToken;\r\n    }\r\n    if (process.server) {\r\n        headers = {\r\n            ...headers,\r\n            ...useRequestHeaders(['cookie']),\r\n            referer: config.public.baseURL\r\n        }\r\n    }\r\n    const token = useCookie('token')\r\n    if (token.value) {\r\n        headers = {\r\n            ...headers,\r\n            'Authorization': `Bearer ${token.value}`,\r\n        }\r\n    }\r\n    return useFetch(url, {\r\n        baseURL: config.public.baseURL,\r\n        headers,\r\n        credentials: 'include',\r\n        ...opts,\r\n    });\r\n}",
      "start": 1726490140907,
      "end": 1726490140989,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1726490140989,
      "end": 1726490140989,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1726490140989,
      "end": 1726490140989,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1726490140989,
      "end": 1726490140989,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1726490140989,
      "end": 1726490140989,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1726490140989,
      "end": 1726490140989,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1726490140989,
      "end": 1726490140989,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "export const useCustomFetch = async (url, opts) => {\n  const config = useRuntimeConfig();\n  const xsrfToken = useCookie(\"XSRF-TOKEN\");\n  let headers = {\n    accept: \"application/json\",\n    ...opts?.headers\n  };\n  if (xsrfToken && xsrfToken.value !== null) {\n    headers[\"X-XSRF-TOKEN\"] = xsrfToken;\n  }\n  if (process.server) {\n    headers = {\n      ...headers,\n      ...useRequestHeaders([\"cookie\"]),\n      referer: config.public.baseURL\n    };\n  }\n  const token = useCookie(\"token\");\n  if (token.value) {\n    headers = {\n      ...headers,\n      \"Authorization\": `Bearer ${token.value}`\n    };\n  }\n  return useFetch(url, {\n    baseURL: config.public.baseURL,\n    headers,\n    credentials: \"include\",\n    ...opts\n  });\n};\n",
      "start": 1726490140989,
      "end": 1726490141012,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/home/saeed/w/projects/beautymap/beautyfront/composables/useCustomFetch.ts"
        ],
        "sourcesContent": [
          "export const useCustomFetch = async (url: string, opts: Object) => {\r\n    const config = useRuntimeConfig()\r\n\r\n    const xsrfToken = useCookie('XSRF-TOKEN')\r\n    let headers = {\r\n        accept: 'application/json',\r\n        ...opts?.headers,\r\n    }\r\n    if (xsrfToken && xsrfToken.value !== null) {\r\n        headers['X-XSRF-TOKEN'] = xsrfToken;\r\n    }\r\n    if (process.server) {\r\n        headers = {\r\n            ...headers,\r\n            ...useRequestHeaders(['cookie']),\r\n            referer: config.public.baseURL\r\n        }\r\n    }\r\n    const token = useCookie('token')\r\n    if (token.value) {\r\n        headers = {\r\n            ...headers,\r\n            'Authorization': `Bearer ${token.value}`,\r\n        }\r\n    }\r\n    return useFetch(url, {\r\n        baseURL: config.public.baseURL,\r\n        headers,\r\n        credentials: 'include',\r\n        ...opts,\r\n    });\r\n}"
        ],
        "mappings": "AAAO,aAAM,iBAAiB,OAAO,KAAa,SAAiB;AAC/D,QAAM,SAAS,iBAAiB;AAEhC,QAAM,YAAY,UAAU,YAAY;AACxC,MAAI,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,GAAG,MAAM;AAAA,EACb;AACA,MAAI,aAAa,UAAU,UAAU,MAAM;AACvC,YAAQ,cAAc,IAAI;AAAA,EAC9B;AACA,MAAI,QAAQ,QAAQ;AAChB,cAAU;AAAA,MACN,GAAG;AAAA,MACH,GAAG,kBAAkB,CAAC,QAAQ,CAAC;AAAA,MAC/B,SAAS,OAAO,OAAO;AAAA,IAC3B;AAAA,EACJ;AACA,QAAM,QAAQ,UAAU,OAAO;AAC/B,MAAI,MAAM,OAAO;AACb,cAAU;AAAA,MACN,GAAG;AAAA,MACH,iBAAiB,UAAU,MAAM,KAAK;AAAA,IAC1C;AAAA,EACJ;AACA,SAAO,SAAS,KAAK;AAAA,IACjB,SAAS,OAAO,OAAO;AAAA,IACvB;AAAA,IACA,aAAa;AAAA,IACb,GAAG;AAAA,EACP,CAAC;AACL;",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1726490141012,
      "end": 1726490141012,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1726490141012,
      "end": 1726490141012,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1726490141012,
      "end": 1726490141012,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1726490141012,
      "end": 1726490141012,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726490141012,
      "end": 1726490141012,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726490141012,
      "end": 1726490141012,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1726490141012,
      "end": 1726490141012,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1726490141012,
      "end": 1726490141012,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1726490141012,
      "end": 1726490141012,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726490141012,
      "end": 1726490141012,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1726490141012,
      "end": 1726490141012,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "export const useCustomFetch = async (url, opts) => {\n  const config = useRuntimeConfig();\n  const xsrfToken = useCookie(\"XSRF-TOKEN\");\n  let headers = {\n    accept: \"application/json\",\n    ...opts?.headers\n  };\n  if (xsrfToken && xsrfToken.value !== null) {\n    headers[\"X-XSRF-TOKEN\"] = xsrfToken;\n  }\n  if (true) {\n    headers = {\n      ...headers,\n      ...useRequestHeaders([\"cookie\"]),\n      referer: config.public.baseURL\n    };\n  }\n  const token = useCookie(\"token\");\n  if (token.value) {\n    headers = {\n      ...headers,\n      \"Authorization\": `Bearer ${token.value}`\n    };\n  }\n  return useFetch(url, {\n    baseURL: config.public.baseURL,\n    headers,\n    credentials: \"include\",\n    ...opts\n  });\n};\n",
      "start": 1726490141012,
      "end": 1726490141084,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/home/saeed/w/projects/beautymap/beautyfront/composables/useCustomFetch.ts\"],\n  \"sourcesContent\": [\"export const useCustomFetch = async (url, opts) => {\\n  const config = useRuntimeConfig();\\n  const xsrfToken = useCookie(\\\"XSRF-TOKEN\\\");\\n  let headers = {\\n    accept: \\\"application/json\\\",\\n    ...opts?.headers\\n  };\\n  if (xsrfToken && xsrfToken.value !== null) {\\n    headers[\\\"X-XSRF-TOKEN\\\"] = xsrfToken;\\n  }\\n  if (process.server) {\\n    headers = {\\n      ...headers,\\n      ...useRequestHeaders([\\\"cookie\\\"]),\\n      referer: config.public.baseURL\\n    };\\n  }\\n  const token = useCookie(\\\"token\\\");\\n  if (token.value) {\\n    headers = {\\n      ...headers,\\n      \\\"Authorization\\\": `Bearer ${token.value}`\\n    };\\n  }\\n  return useFetch(url, {\\n    baseURL: config.public.baseURL,\\n    headers,\\n    credentials: \\\"include\\\",\\n    ...opts\\n  });\\n};\\n\"],\n  \"mappings\": \"AAAO,aAAM,iBAAiB,OAAO,KAAK,SAAS;AACjD,QAAM,SAAS,iBAAiB;AAChC,QAAM,YAAY,UAAU,YAAY;AACxC,MAAI,UAAU;AAAA,IACZ,QAAQ;AAAA,IACR,GAAG,MAAM;AAAA,EACX;AACA,MAAI,aAAa,UAAU,UAAU,MAAM;AACzC,YAAQ,cAAc,IAAI;AAAA,EAC5B;AACA,MAAI,MAAgB;AAClB,cAAU;AAAA,MACR,GAAG;AAAA,MACH,GAAG,kBAAkB,CAAC,QAAQ,CAAC;AAAA,MAC/B,SAAS,OAAO,OAAO;AAAA,IACzB;AAAA,EACF;AACA,QAAM,QAAQ,UAAU,OAAO;AAC/B,MAAI,MAAM,OAAO;AACf,cAAU;AAAA,MACR,GAAG;AAAA,MACH,iBAAiB,UAAU,MAAM,KAAK;AAAA,IACxC;AAAA,EACF;AACA,SAAO,SAAS,KAAK;AAAA,IACnB,SAAS,OAAO,OAAO;AAAA,IACvB;AAAA,IACA,aAAa;AAAA,IACb,GAAG;AAAA,EACL,CAAC;AACH;\",\n  \"names\": []\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1726490141084,
      "end": 1726490141084,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1726490141084,
      "end": 1726490141084,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1726490141084,
      "end": 1726490141084,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1726490141084,
      "end": 1726490141084,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1726490141084,
      "end": 1726490141084,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1726490141084,
      "end": 1726490141084,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1726490141084,
      "end": 1726490141084,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "result": "export const useCustomFetch = async (url, opts) => {\n  const config = useRuntimeConfig();\n  const xsrfToken = useCookie(\"XSRF-TOKEN\");\n  let headers = {\n    accept: \"application/json\",\n    ...opts?.headers\n  };\n  if (xsrfToken && xsrfToken.value !== null) {\n    headers[\"X-XSRF-TOKEN\"] = xsrfToken;\n  }\n  if (true) {\n    headers = {\n      ...headers,\n      ...useRequestHeaders([\"cookie\"]),\n      referer: config.public.baseURL\n    };\n  }\n  const token = useCookie(\"token\");\n  if (token.value) {\n    headers = {\n      ...headers,\n      \"Authorization\": `Bearer ${token.value}`\n    };\n  }\n  return useFetch(url, {\n    baseURL: config.public.baseURL,\n    headers,\n    credentials: \"include\",\n    ...opts\n  }, '$sC22i8rhLA');\n};\n",
      "start": 1726490141084,
      "end": 1726490141085,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC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"
      }
    },
    {
      "name": "nuxt:composable-keys",
      "result": "export const useCustomFetch = async (url, opts) => {\n  const config = useRuntimeConfig();\n  const xsrfToken = useCookie(\"XSRF-TOKEN\");\n  let headers = {\n    accept: \"application/json\",\n    ...opts?.headers\n  };\n  if (xsrfToken && xsrfToken.value !== null) {\n    headers[\"X-XSRF-TOKEN\"] = xsrfToken;\n  }\n  if (true) {\n    headers = {\n      ...headers,\n      ...useRequestHeaders([\"cookie\"]),\n      referer: config.public.baseURL\n    };\n  }\n  const token = useCookie(\"token\");\n  if (token.value) {\n    headers = {\n      ...headers,\n      \"Authorization\": `Bearer ${token.value}`\n    };\n  }\n  return useFetch(url, {\n    baseURL: config.public.baseURL,\n    headers,\n    credentials: \"include\",\n    ...opts\n  }, '$sC22i8rhLA');\n};\n",
      "start": 1726490141084,
      "end": 1726490141085,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC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"
      }
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { useRuntimeConfig } from '#app/nuxt';\nimport { useCookie } from '#app/composables/cookie';\nimport { useRequestHeaders } from '#app/composables/ssr';\nimport { useFetch } from '#app/composables/fetch';\nexport const useCustomFetch = async (url, opts) => {\n  const config = useRuntimeConfig();\n  const xsrfToken = useCookie(\"XSRF-TOKEN\");\n  let headers = {\n    accept: \"application/json\",\n    ...opts?.headers\n  };\n  if (xsrfToken && xsrfToken.value !== null) {\n    headers[\"X-XSRF-TOKEN\"] = xsrfToken;\n  }\n  if (true) {\n    headers = {\n      ...headers,\n      ...useRequestHeaders([\"cookie\"]),\n      referer: config.public.baseURL\n    };\n  }\n  const token = useCookie(\"token\");\n  if (token.value) {\n    headers = {\n      ...headers,\n      \"Authorization\": `Bearer ${token.value}`\n    };\n  }\n  return useFetch(url, {\n    baseURL: config.public.baseURL,\n    headers,\n    credentials: \"include\",\n    ...opts\n  }, '$sC22i8rhLA');\n};\n",
      "start": 1726490141085,
      "end": 1726490141085,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,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"
      }
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { useRuntimeConfig } from '#app/nuxt';\nimport { useCookie } from '#app/composables/cookie';\nimport { useRequestHeaders } from '#app/composables/ssr';\nimport { useFetch } from '#app/composables/fetch';\nexport const useCustomFetch = async (url, opts) => {\n  const config = useRuntimeConfig();\n  const xsrfToken = useCookie(\"XSRF-TOKEN\");\n  let headers = {\n    accept: \"application/json\",\n    ...opts?.headers\n  };\n  if (xsrfToken && xsrfToken.value !== null) {\n    headers[\"X-XSRF-TOKEN\"] = xsrfToken;\n  }\n  if (true) {\n    headers = {\n      ...headers,\n      ...useRequestHeaders([\"cookie\"]),\n      referer: config.public.baseURL\n    };\n  }\n  const token = useCookie(\"token\");\n  if (token.value) {\n    headers = {\n      ...headers,\n      \"Authorization\": `Bearer ${token.value}`\n    };\n  }\n  return useFetch(url, {\n    baseURL: config.public.baseURL,\n    headers,\n    credentials: \"include\",\n    ...opts\n  }, '$sC22i8rhLA');\n};\n",
      "start": 1726490141085,
      "end": 1726490141085,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,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"
      }
    },
    {
      "name": "unctx:transform",
      "start": 1726490141085,
      "end": 1726490141085,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1726490141085,
      "end": 1726490141085,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1726490141085,
      "end": 1726490141085,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1726490141085,
      "end": 1726490141085,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1726490141085,
      "end": 1726490141085,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1726490141085,
      "end": 1726490141085,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1726490141085,
      "end": 1726490141085,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1726490141085,
      "end": 1726490141086,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1726490141086,
      "end": 1726490141086,
      "order": "normal"
    }
  ]
}
