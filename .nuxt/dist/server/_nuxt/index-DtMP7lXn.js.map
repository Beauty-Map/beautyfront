{"version":3,"file":"index-DtMP7lXn.js","sources":["../../../../components/register-drawer/OtpForm.vue","../../../../components/register-drawer/SetPasswordForm.vue","../../../../components/register-drawer/RegisterMiniForm.vue","../../../../pages/register/index.vue"],"sourcesContent":["<template>\r\n  <div class=\"w-full overflow-y-auto\">\r\n    <OtpInput :length=\"6\" v-model=\"form.code\" :has-error=\"hasOtpError\" class=\"mt-[20px] mb-[20px]\" />\r\n    <OtpResendButton ref=\"otpContainer\" :reset=\"resetOtp\" @resend=\"resendOtp\"/>\r\n    <MainActionButton class=\"mt-[24px]\" @click=\"checkOtpCode\">\r\n      <div class=\"text-white text-center text-[20px] leading-[30px]\">تایید</div>\r\n    </MainActionButton>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n\r\nimport MainActionButton from \"~/components/button/form/MainActionButton.vue\";\r\nimport {useDrawerStore} from \"~/store/Drawer\";\r\nimport OtpInput from \"~/components/input/OtpInput.vue\";\r\nimport OtpResendButton from \"~/components/otp-drawer/OtpResendButton.vue\";\r\n\r\nconst emits = defineEmits(['changePhoneNumber', 'resend', 'validate'])\r\nconst props = defineProps({\r\n  modelValue: {\r\n    type: String,\r\n    default: ''\r\n  }\r\n})\r\nconst app = useNuxtApp()\r\nconst store = useDrawerStore()\r\n\r\nconst form = ref<IVerifyRegisterForm>({\r\n  phone_number: props.modelValue,\r\n  code: '',\r\n})\r\n\r\nconst resetOtp = ref<Boolean>(false)\r\nconst hasOtpError = ref<Boolean>(false)\r\n\r\nconst checkOtpCode = () => {\r\n  if (!form.value.code) {\r\n    app.$toast.error('کد تایید را وارد کنید', {rtl: true,})\r\n    return\r\n  }\r\n  emits('validate', form.value.code)\r\n}\r\n\r\nconst resendOtp = async () => {\r\n  resetOtp.value = !resetOtp.value\r\n\r\n  const data = {\r\n    phone_number: form.value.phone_number,\r\n  }\r\n  const res = await useCustomFetch('/auth/register', {\r\n    method: \"POST\",\r\n    body: data\r\n  })\r\n  if (res.error.value != null) {\r\n    app.$toast.error('کد ورود با موفقیت ارسال شد', {rtl: true})\r\n  }\r\n  if (res.data.value != null) {\r\n    app.$toast.success('کد ورود با موفقیت ارسال شد', {rtl: true})\r\n  }\r\n}\r\nwatch(() => form.value.code, () => hasOtpError.value = false)\r\nonMounted(() => nextTick(() => {\r\n  form.value.phone_number = props.modelValue\r\n}))\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>","<template>\r\n  <div class=\"w-full overflow-y-auto\">\r\n    <PasswordInput title=\"کلمه عبور\" v-model=\"form.password\" class=\"mt-[27px]\"/>\r\n    <PasswordInput title=\"تکرار کلمه عبور\" v-model=\"form.password_confirmation\" class=\"mt-[27px]\"/>\r\n    <MainActionButton class=\"mt-[48px]\" @click=\"doSetPassword\">\r\n      <div class=\"text-white text-center text-[20px] leading-[30px]\">ثبت</div>\r\n    </MainActionButton>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n\r\nimport PasswordInput from \"~/components/input/PasswordInput.vue\";\r\nimport MainActionButton from \"~/components/button/form/MainActionButton.vue\";\r\nimport {useDrawerStore} from \"~/store/Drawer\";\r\n\r\nconst props = defineProps({\r\n  email: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  rememberToken: {\r\n    type: String,\r\n    default: ''\r\n  }\r\n})\r\n\r\nconst app = useNuxtApp()\r\nconst router = useRouter()\r\nconst store = useDrawerStore()\r\n\r\nconst form = ref<ISetPasswordRegisterForm>({\r\n  password: '',\r\n  password_confirmation: '',\r\n})\r\n\r\nconst doSetPassword = async () => {\r\n  const data = {\r\n    email: props.email,\r\n    remember_token: props.rememberToken,\r\n    password: form.value.password,\r\n    password_confirmation: form.value.password_confirmation,\r\n  }\r\n  const res = await useCustomFetch('/auth/password', {\r\n    method: \"POST\",\r\n    body: data\r\n  })\r\n  if (res.error.value != null) {\r\n    app.$toast.error('خطا رخ داده است', {rtl: true})\r\n  }\r\n  if (res.data.value != null) {\r\n    app.$toast.success('کد ورود با موفقیت ارسال شد', {rtl: true})\r\n    if (isMd) {\r\n      await router.replace('/login')\r\n    } else {\r\n      store.closeAllDrawers()\r\n      store.openCompleteProfileDrawer()\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// const isMd = computed(() => window.screen.width >= 768)\r\nconst isMd = false\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>","<template>\r\n  <div class=\"w-full overflow-y-auto\">\r\n    <EmailInput @input=\"onInput\" title=\"ایمیل\" v-model=\"form.email\"/>\r\n    <PasswordInput title=\"کلمه عبور\" v-model=\"form.password\" class=\"mt-[27px]\"/>\r\n    <PolicyAndRulesButton class=\"mt-[24px]\" v-model=\"form.accept_policy\"/>\r\n    <MainActionButton :disabled=\"loading\" class=\"mt-[24px]\" @click=\"doRegister\">\r\n      <div v-if=\"loading\">\r\n        <LoadingComponent />\r\n      </div>\r\n      <div v-else class=\"text-white text-center text-[20px] leading-[30px]\">ارسال کد تایید</div>\r\n    </MainActionButton>\r\n    <BottomText class=\"mt-[18px]\" @click=\"openLoginModal\" title=\"ورود\"/>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n\r\nimport PolicyAndRulesButton from \"~/components/icons/AuthDrawer/PolicyAndRulesButton.vue\";\r\nimport MainActionButton from \"~/components/button/form/MainActionButton.vue\";\r\nimport BottomText from \"~/components/icons/AuthDrawer/BottomText.vue\";\r\nimport {useDrawerStore} from \"~/store/Drawer\";\r\nimport EmailInput from \"~/components/input/EmailInput.vue\";\r\nimport PasswordInput from \"~/components/input/PasswordInput.vue\";\r\nimport LoadingComponent from \"~/components/global/Loading.vue\";\r\n\r\nconst emits = defineEmits(['sent', 'update:modelValue'])\r\nconst app = useNuxtApp()\r\nconst router = useRouter()\r\nconst store = useDrawerStore()\r\n\r\nconst props = defineProps({\r\n  modelValue: {\r\n    type: String,\r\n    default: ''\r\n  }\r\n})\r\n\r\nconst loading = ref(false)\r\n\r\nconst form = ref<IRegisterForm>({\r\n  email: '',\r\n  password: '',\r\n  accept_policy: false\r\n})\r\n\r\nconst validated = () => {\r\n  let validated = true\r\n  if (!form.value.email) {\r\n    app.$toast.error('لطفا ایمیل خود را وارد کنید', {rtl: true})\r\n    validated = false\r\n  }\r\n  if (!form.value.password) {\r\n    app.$toast.error('لطفا پسورد خود را وارد کنید', {rtl: true})\r\n    validated = false\r\n  }\r\n  if (!form.value.accept_policy) {\r\n    app.$toast.error('لطفا تیک گزینه تایید قوانین را بزنید', {rtl: true})\r\n    validated = false\r\n  }\r\n\r\n  return validated\r\n}\r\n\r\nconst doRegister = async () => {\r\n  if (loading.value) return\r\n  if (!validated()) {\r\n    return\r\n  }\r\n  loading.value = true\r\n  const ref = useCookie('referralId', {\r\n    maxAge: 60 * 60 * 24 * 30, // 30 days\r\n    path: '/',\r\n    sameSite: 'lax',\r\n  });\r\n  const data = {\r\n    email: form.value.email,\r\n    password: form.value.password,\r\n    referrer_code: ref.value?.toString(),\r\n  }\r\n  const {$postRequest: postRequest}=app\r\n  postRequest('/auth/register', data)\r\n      .then(async res => {\r\n        app.$toast.success('کد ورود با موفقیت ارسال شد', {rtl: true})\r\n        const email = useCookie('email')\r\n        email.value = form.value.email\r\n        app.$toast.success('کد ورود با موفقیت ارسال شد', {rtl: true})\r\n        emits('sent')\r\n      })\r\n      .catch(err => {\r\n        const errors = Object.values(err.data.errors)\r\n        for (const k in errors) {\r\n          for (const e in errors[k]) {\r\n            app.$toast.error(errors[k][e], {rtl: true,})\r\n          }\r\n        }\r\n      })\r\n      .finally(() => {\r\n        setTimeout(() =>loading.value = false, 500)\r\n      })\r\n}\r\n\r\nconst openLoginModal = () => {\r\n  if (isMd) {\r\n    router.push('/login')\r\n  } else {\r\n    store.closeAllDrawers()\r\n    store.openLoginDrawer()\r\n  }\r\n}\r\n\r\nconst onInput = (e: Event) => {\r\n  emits('update:modelValue', e.target?.value)\r\n}\r\n// const isMd = computed(() => window.screen.width >= 768)\r\nconst isMd = false\r\n\r\nonMounted(() => nextTick(() => {\r\n  form.value.email = props.modelValue\r\n}))\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>","<template>\r\n  <div\r\n      class=\"hidden md:flex flex-col relative justify-center items-center w-screen h-[calc(100vh-87px)] py-[35px] px-[40px] overflow-y-auto bg-white\"\r\n  >\r\n    <div class=\"hidden w-full md:flex flex-row max-w-[1200px] mx-auto min-h-[400px] bg-white rounded-[20px] shadow-[0px_2px_8px_0px_#00000040]\">\r\n      <div class=\"overflow-y-auto w-full md:w-1/2 flex flex-col justify-center items-center md:rounded-tl-[20px] md:rounded-bl-[20px] rounded-[20px] h-full pb-[16px] md:px-[65px] px-[24px]\">\r\n        <div class=\"mt-[40px] text-[#344055] text-[32px] text-right font-bold\">\r\n          ثبت نام\r\n        </div>\r\n        <div class=\"mt-[25px] text-[#B6B8C3] font-normal text-[16px] text-right\">\r\n          برای دسترسی مستقیم به هنرمندان و تماس وارد شوید\r\n        </div>\r\n        <div class=\"border border-[#2C3E5033] w-full my-[20px] border-dashed\"></div>\r\n        <RegisterMiniForm v-model=\"form.email\" @sent=\"onOtpSent\" class=\"mt-[17px]\" v-if=\"!otpSent && !showSetPassword\"/>\r\n        <OtpForm v-model=\"form.email\" @resend=\"resendOtp\" @validate=\"validate\" v-else-if=\"!showSetPassword\"/>\r\n        <SetPasswordForm\r\n            :email=\"form.email\"\r\n            :remember-token=\"rememberToken\"\r\n            v-else-if=\"showSetPassword\"/>\r\n      </div>\r\n      <div class=\"overflow-y-auto hidden md:flex flex-col justify-center items-center py-[40px] px-[65px] w-1/2 bg-[#2dcfc1] rounded-tl-[20px] rounded-bl-[20px] h-full\">\r\n        <LoginImage />\r\n        <div class=\"mt-[24px] text-center w-full font-medium text-[24px] text-white\">\r\n          پشتیبانی فوری\r\n        </div>\r\n        <div class=\"mt-[24px] text-center w-full font-light text-[18px] text-white\">\r\n          شما میتوانید به صورت 24 ساعته و 7 روز هفته را با ما تماس بگیرید\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div\r\n      class=\"flex flex-col md:hidden px-[17px] overflow-y-scroll w-full duration-700 ease-in-out bg-white\"\r\n  >\r\n    <div class=\"flex flex-row items-center justify-end pl-[3px]\">\r\n      <BackIcon @click=\"goBack\" />\r\n    </div>\r\n    <div class=\"flex flex-col justify-start items-center\">\r\n      <BeautyIcon class=\"mt-[8px]\"/>\r\n      <Header />\r\n      <RegisterForm class=\"mt-[17px]\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport OtpForm from \"~/components/register-drawer/OtpForm.vue\";\r\nimport SetPasswordForm from \"~/components/register-drawer/SetPasswordForm.vue\";\r\nimport RegisterMiniForm from \"~/components/register-drawer/RegisterMiniForm.vue\";\r\nimport LoginImage from \"~/components/login-drawer/LoginImage.vue\";\r\nimport Header from \"~/components/register-drawer/Header.vue\";\r\nimport BackIcon from \"~/components/icons/BackIcon.vue\";\r\nimport BeautyIcon from \"~/components/icons/AuthDrawer/BeautyIcon.vue\";\r\nimport {useDrawerStore} from \"~/store/Drawer\";\r\nimport {definePageMeta} from \"#imports\";\r\nimport RegisterForm from \"~/components/register-drawer/RegisterForm.vue\";\r\n\r\ndefinePageMeta({\r\n  middleware: 'guest'\r\n})\r\n\r\nconst app = useNuxtApp()\r\nconst otpSent = ref<Boolean>(false)\r\nconst router = useRouter()\r\nconst showSetPassword = ref<Boolean>(false)\r\nconst form = ref<IRegisterForm>({\r\n  email: '',\r\n  accept_policy: false,\r\n})\r\nconst rememberToken = ref<String>('')\r\nconst store = useDrawerStore()\r\n\r\nconst goBack = () => {\r\n  store.closeAllDrawers()\r\n}\r\n\r\nconst onOtpSent = () => {\r\n  otpSent.value = true\r\n}\r\n\r\nconst resendOtp = () => {\r\n  otpSent.value = false\r\n}\r\n\r\nconst validate = async (code: string) => {\r\n  const data = {\r\n    email: form.value.email,\r\n    code: code\r\n  }\r\n  const res = await useCustomFetch('/auth/register/otp', {\r\n    method: \"POST\",\r\n    body: data\r\n  })\r\n  if (res.data.value) {\r\n    app.$toast.success('اطلاعات شما با موفقیت ثبت شد', {rtl: true})\r\n    showSetPassword.value = true\r\n    rememberToken.value = res.data.value?.token as string\r\n  }\r\n  if (res.error.value) {\r\n    app.$toast.error('کد ورود صحیح نیست!', {rtl: true})\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"names":["validated","ref"],"mappings":"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"}