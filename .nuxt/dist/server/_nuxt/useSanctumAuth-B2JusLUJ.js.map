{"version":3,"file":"useSanctumAuth-B2JusLUJ.js","sources":["../../../../node_modules/nuxt-auth-sanctum/dist/runtime/composables/useSanctumClient.mjs","../../../../node_modules/nuxt-auth-sanctum/dist/runtime/composables/useSanctumAuth.mjs"],"sourcesContent":["import { useNuxtApp } from \"#app\";\nexport const useSanctumClient = () => {\n  const { $sanctumClient } = useNuxtApp();\n  return $sanctumClient;\n};\n","import { computed } from \"vue\";\nimport { useSanctumClient } from \"./useSanctumClient.mjs\";\nimport { useSanctumUser } from \"./useSanctumUser.mjs\";\nimport { navigateTo, useNuxtApp, useRoute } from \"#app\";\nimport { useSanctumConfig } from \"./useSanctumConfig.mjs\";\nexport const useSanctumAuth = () => {\n  const nuxtApp = useNuxtApp();\n  const user = useSanctumUser();\n  const client = useSanctumClient();\n  const options = useSanctumConfig();\n  const isAuthenticated = computed(() => {\n    return user.value !== null;\n  });\n  async function refreshIdentity() {\n    user.value = await client(options.endpoints.user);\n  }\n  async function login(credentials) {\n    const currentRoute = useRoute();\n    if (isAuthenticated.value === true) {\n      if (options.redirectIfAuthenticated === false) {\n        throw new Error(\"User is already authenticated\");\n      }\n      if (options.redirect.onLogin === false || options.redirect.onLogin === currentRoute.path) {\n        return;\n      }\n      await nuxtApp.runWithContext(\n        () => navigateTo(options.redirect.onLogin)\n      );\n    }\n    await client(options.endpoints.login, {\n      method: \"post\",\n      body: credentials\n    });\n    await refreshIdentity();\n    if (options.redirect.keepRequestedRoute) {\n      const requestedRoute = currentRoute.query.redirect;\n      if (requestedRoute && requestedRoute !== currentRoute.path) {\n        await nuxtApp.runWithContext(\n          () => navigateTo(requestedRoute)\n        );\n        return;\n      }\n    }\n    if (options.redirect.onLogin === false || currentRoute.path === options.redirect.onLogin) {\n      return;\n    }\n    await nuxtApp.runWithContext(\n      () => navigateTo(options.redirect.onLogin)\n    );\n  }\n  async function logout() {\n    if (isAuthenticated.value === false) {\n      throw new Error(\"User is not authenticated\");\n    }\n    const currentRoute = useRoute();\n    await client(options.endpoints.logout, { method: \"post\" });\n    user.value = null;\n    if (options.redirect.onLogout === false || currentRoute.path === options.redirect.onLogout) {\n      return;\n    }\n    await nuxtApp.runWithContext(\n      () => navigateTo(options.redirect.onLogout)\n    );\n  }\n  return {\n    user,\n    isAuthenticated,\n    login,\n    logout,\n    refreshIdentity\n  };\n};\n"],"names":[],"mappings":";;;;;;AACO,MAAM,mBAAmB,MAAM;AACpC,QAAM,EAAE,mBAAmB;AAC3B,SAAO;AACT;ACCY,MAAC,iBAAiB,MAAM;AAClC,QAAM,UAAU;AAChB,QAAM,OAAO;AACb,QAAM,SAAS;AACf,QAAM,UAAU;AAChB,QAAM,kBAAkB,SAAS,MAAM;AACrC,WAAO,KAAK,UAAU;AAAA,EAC1B,CAAG;AACD,iBAAe,kBAAkB;AAC/B,SAAK,QAAQ,MAAM,OAAO,QAAQ,UAAU,IAAI;AAAA,EACjD;AACD,iBAAe,MAAM,aAAa;AAChC,UAAM,eAAe;AACrB,QAAI,gBAAgB,UAAU,MAAM;AAClC,UAAI,QAAQ,4BAA4B,OAAO;AAC7C,cAAM,IAAI,MAAM,+BAA+B;AAAA,MAChD;AACD,UAAI,QAAQ,SAAS,YAAY,SAAS,QAAQ,SAAS,YAAY,aAAa,MAAM;AACxF;AAAA,MACD;AACD,YAAM,QAAQ;AAAA,QACZ,MAAM,WAAW,QAAQ,SAAS,OAAO;AAAA,MACjD;AAAA,IACK;AACD,UAAM,OAAO,QAAQ,UAAU,OAAO;AAAA,MACpC,QAAQ;AAAA,MACR,MAAM;AAAA,IACZ,CAAK;AACD,UAAM,gBAAe;AACrB,QAAI,QAAQ,SAAS,oBAAoB;AACvC,YAAM,iBAAiB,aAAa,MAAM;AAC1C,UAAI,kBAAkB,mBAAmB,aAAa,MAAM;AAC1D,cAAM,QAAQ;AAAA,UACZ,MAAM,WAAW,cAAc;AAAA,QACzC;AACQ;AAAA,MACD;AAAA,IACF;AACD,QAAI,QAAQ,SAAS,YAAY,SAAS,aAAa,SAAS,QAAQ,SAAS,SAAS;AACxF;AAAA,IACD;AACD,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,QAAQ,SAAS,OAAO;AAAA,IAC/C;AAAA,EACG;AACD,iBAAe,SAAS;AACtB,QAAI,gBAAgB,UAAU,OAAO;AACnC,YAAM,IAAI,MAAM,2BAA2B;AAAA,IAC5C;AACD,UAAM,eAAe;AACrB,UAAM,OAAO,QAAQ,UAAU,QAAQ,EAAE,QAAQ,OAAM,CAAE;AACzD,SAAK,QAAQ;AACb,QAAI,QAAQ,SAAS,aAAa,SAAS,aAAa,SAAS,QAAQ,SAAS,UAAU;AAC1F;AAAA,IACD;AACD,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,QAAQ,SAAS,QAAQ;AAAA,IAChD;AAAA,EACG;AACD,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACA;","x_google_ignoreList":[0,1]}