import{H as l,D as p,al as g,g as w,z as d,a7 as r}from"./entry.D6qKh-EG.js";const m=()=>{const{$sanctumClient:e}=l();return e},x=()=>{const e=l(),n=p(),i=m(),t=g(),u=w(()=>n.value!==null);async function c(){n.value=await i(t.endpoints.user)}async function f(a){const o=d();if(u.value===!0){if(t.redirectIfAuthenticated===!1)throw new Error("User is already authenticated");if(t.redirect.onLogin===!1||t.redirect.onLogin===o.path)return;await e.runWithContext(()=>r(t.redirect.onLogin))}if(await i(t.endpoints.login,{method:"post",body:a}),await c(),t.redirect.keepRequestedRoute){const s=o.query.redirect;if(s&&s!==o.path){await e.runWithContext(()=>r(s));return}}t.redirect.onLogin===!1||o.path===t.redirect.onLogin||await e.runWithContext(()=>r(t.redirect.onLogin))}async function h(){if(u.value===!1)throw new Error("User is not authenticated");const a=d();await i(t.endpoints.logout,{method:"post"}),n.value=null,!(t.redirect.onLogout===!1||a.path===t.redirect.onLogout)&&await e.runWithContext(()=>r(t.redirect.onLogout))}return{user:n,isAuthenticated:u,login:f,logout:h,refreshIdentity:c}};export{x as u};
